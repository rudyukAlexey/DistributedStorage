<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<AgileJWebModel version="1.8.3.v20151019-2113">
    <type deep="true" displayTextTemplate="org.apache.commons.math3.linear.LUDecomposition" elementName="LUDecomposition" fileNameKey="org.apache.commons.math3.linear.LUDecomposition.xml" formalDisplayName="LUDecomposition" isBinary="true" isClass="true" isDeprecated="false" isEnum="false" isInterface="false" isPrimitive="false" isTopLevel="true" javaProjectName="DistributedStorage" modelMemberIdentifier="type:org.apache.commons.math3.linear.LUDecomposition" modifiers="public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.LUDecomposition">
        <filters>
            <filter signature="all classes"/>
            <filter signature="all types"/>
            <filter signature="bytecode types"/>
            <filter signature="concrete classes"/>
            <filter signature="inner types named {type-name}" switchValues="LUDecomposition"/>
            <filter signature="members of package {package-name}" switchValues="org.apache.commons.math3.linear"/>
            <filter signature="non java star package types"/>
            <filter signature="public types"/>
            <filter signature="top level types"/>
            <filter signature="types named {type-name-pattern}" switchValues="LUDecomposition"/>
            <filter signature="types with static members"/>
        </filters>
        <outermostType>
            <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.LUDecomposition" elementName="LUDecomposition" formalDisplayName="LUDecomposition" modelMemberIdentifier="type:org.apache.commons.math3.linear.LUDecomposition" modifiers="public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.LUDecomposition"/>
        </outermostType>
        <field deep="true" elementName="DEFAULT_TOO_SMALL" fieldLineTooltipDescription="LUDecomposition.DEFAULT_TOO_SMALL&#10;&#9;references one&#10;double" isBinary="true" isDeprecated="false" modelMemberIdentifier="field:org.apache.commons.math3.linear.LUDecomposition.DEFAULT_TOO_SMALL" modifiers="final,private,static,">
            <filters>
                <filter signature="all fields"/>
                <filter signature="fields named {field-name-pattern}" switchValues="DEFAULT_TOO_SMALL"/>
                <filter signature="private fields"/>
                <filter signature="static fields"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.LUDecomposition" elementName="LUDecomposition" formalDisplayName="LUDecomposition" modelMemberIdentifier="type:org.apache.commons.math3.linear.LUDecomposition" modifiers="public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.LUDecomposition"/>
            </declarer>
            <typeReference>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </containedType>
                </typeReference>
            </typeReference>
        </field>
        <field deep="true" elementName="lu" fieldLineTooltipDescription="LUDecomposition.lu&#10;&#9;references many&#10;double[][]" isBinary="true" isDeprecated="false" modelMemberIdentifier="field:org.apache.commons.math3.linear.LUDecomposition.lu" modifiers="final,private,">
            <filters>
                <filter signature="all fields"/>
                <filter signature="fields named {field-name-pattern}" switchValues="lu"/>
                <filter signature="one to many fields"/>
                <filter signature="private fields"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.LUDecomposition" elementName="LUDecomposition" formalDisplayName="LUDecomposition" modelMemberIdentifier="type:org.apache.commons.math3.linear.LUDecomposition" modifiers="public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.LUDecomposition"/>
            </declarer>
            <typeReference>
                <typeReference arrayDimensions="2" many="true">
                    <rawType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </containedType>
                </typeReference>
            </typeReference>
        </field>
        <field deep="true" elementName="pivot" fieldLineTooltipDescription="LUDecomposition.pivot&#10;&#9;references many&#10;int[]" isBinary="true" isDeprecated="false" modelMemberIdentifier="field:org.apache.commons.math3.linear.LUDecomposition.pivot" modifiers="final,private,">
            <filters>
                <filter signature="all fields"/>
                <filter signature="fields named {field-name-pattern}" switchValues="pivot"/>
                <filter signature="one to many fields"/>
                <filter signature="private fields"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.LUDecomposition" elementName="LUDecomposition" formalDisplayName="LUDecomposition" modelMemberIdentifier="type:org.apache.commons.math3.linear.LUDecomposition" modifiers="public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.LUDecomposition"/>
            </declarer>
            <typeReference>
                <typeReference arrayDimensions="1" many="true">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </typeReference>
        </field>
        <field deep="true" elementName="even" fieldLineTooltipDescription="LUDecomposition.even&#10;&#9;references one&#10;boolean" isBinary="true" isDeprecated="false" modelMemberIdentifier="field:org.apache.commons.math3.linear.LUDecomposition.even" modifiers="private,">
            <filters>
                <filter signature="all fields"/>
                <filter signature="fields named {field-name-pattern}" switchValues="even"/>
                <filter signature="private fields"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.LUDecomposition" elementName="LUDecomposition" formalDisplayName="LUDecomposition" modelMemberIdentifier="type:org.apache.commons.math3.linear.LUDecomposition" modifiers="public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.LUDecomposition"/>
            </declarer>
            <typeReference>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="boolean" elementName="boolean" formalDisplayName="boolean" modelMemberIdentifier="type:boolean" modifiers="" packageName="" qualifiedName="boolean"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="boolean" elementName="boolean" formalDisplayName="boolean" modelMemberIdentifier="type:boolean" modifiers="" packageName="" qualifiedName="boolean"/>
                    </containedType>
                </typeReference>
            </typeReference>
        </field>
        <field deep="true" elementName="singular" fieldLineTooltipDescription="LUDecomposition.singular&#10;&#9;references one&#10;boolean" isBinary="true" isDeprecated="false" modelMemberIdentifier="field:org.apache.commons.math3.linear.LUDecomposition.singular" modifiers="private,">
            <filters>
                <filter signature="all fields"/>
                <filter signature="fields named {field-name-pattern}" switchValues="singular"/>
                <filter signature="private fields"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.LUDecomposition" elementName="LUDecomposition" formalDisplayName="LUDecomposition" modelMemberIdentifier="type:org.apache.commons.math3.linear.LUDecomposition" modifiers="public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.LUDecomposition"/>
            </declarer>
            <typeReference>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="boolean" elementName="boolean" formalDisplayName="boolean" modelMemberIdentifier="type:boolean" modifiers="" packageName="" qualifiedName="boolean"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="boolean" elementName="boolean" formalDisplayName="boolean" modelMemberIdentifier="type:boolean" modifiers="" packageName="" qualifiedName="boolean"/>
                    </containedType>
                </typeReference>
            </typeReference>
        </field>
        <field deep="true" elementName="cachedL" fieldLineTooltipDescription="LUDecomposition.cachedL&#10;&#9;references one&#10;org.apache.commons.math3.linear.RealMatrix" isBinary="true" isDeprecated="false" modelMemberIdentifier="field:org.apache.commons.math3.linear.LUDecomposition.cachedL" modifiers="private,">
            <filters>
                <filter signature="all fields"/>
                <filter signature="fields named {field-name-pattern}" switchValues="cachedL"/>
                <filter signature="private fields"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.LUDecomposition" elementName="LUDecomposition" formalDisplayName="LUDecomposition" modelMemberIdentifier="type:org.apache.commons.math3.linear.LUDecomposition" modifiers="public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.LUDecomposition"/>
            </declarer>
            <typeReference>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </containedType>
                </typeReference>
            </typeReference>
        </field>
        <field deep="true" elementName="cachedU" fieldLineTooltipDescription="LUDecomposition.cachedU&#10;&#9;references one&#10;org.apache.commons.math3.linear.RealMatrix" isBinary="true" isDeprecated="false" modelMemberIdentifier="field:org.apache.commons.math3.linear.LUDecomposition.cachedU" modifiers="private,">
            <filters>
                <filter signature="all fields"/>
                <filter signature="fields named {field-name-pattern}" switchValues="cachedU"/>
                <filter signature="private fields"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.LUDecomposition" elementName="LUDecomposition" formalDisplayName="LUDecomposition" modelMemberIdentifier="type:org.apache.commons.math3.linear.LUDecomposition" modifiers="public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.LUDecomposition"/>
            </declarer>
            <typeReference>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </containedType>
                </typeReference>
            </typeReference>
        </field>
        <field deep="true" elementName="cachedP" fieldLineTooltipDescription="LUDecomposition.cachedP&#10;&#9;references one&#10;org.apache.commons.math3.linear.RealMatrix" isBinary="true" isDeprecated="false" modelMemberIdentifier="field:org.apache.commons.math3.linear.LUDecomposition.cachedP" modifiers="private,">
            <filters>
                <filter signature="all fields"/>
                <filter signature="fields named {field-name-pattern}" switchValues="cachedP"/>
                <filter signature="private fields"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.LUDecomposition" elementName="LUDecomposition" formalDisplayName="LUDecomposition" modelMemberIdentifier="type:org.apache.commons.math3.linear.LUDecomposition" modifiers="public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.LUDecomposition"/>
            </declarer>
            <typeReference>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </containedType>
                </typeReference>
            </typeReference>
        </field>
        <method deep="true" elementName="LUDecomposition" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.LUDecomposition((Lorg/apache/commons/math3/linear/RealMatrix;)V)" modifiers="public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="constructors"/>
                <filter signature="methods named {method-name-pattern}" switchValues="LUDecomposition"/>
                <filter signature="methods of {method-owner}" switchValues="LUDecomposition"/>
                <filter signature="non default constructors"/>
                <filter signature="overloaded methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.LUDecomposition" elementName="LUDecomposition" formalDisplayName="LUDecomposition" modelMemberIdentifier="type:org.apache.commons.math3.linear.LUDecomposition" modifiers="public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.LUDecomposition"/>
            </declarer>
            <parameter name="matrix">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods>
                <method deep="false" elementName="getDeterminant" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getDeterminant(()D)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="getSolver" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getSolver(()Lorg/apache/commons/math3/linear/DecompositionSolver;)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.DecompositionSolver" elementName="DecompositionSolver" formalDisplayName="DecompositionSolver" modelMemberIdentifier="type:org.apache.commons.math3.linear.DecompositionSolver" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.DecompositionSolver"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.DecompositionSolver" elementName="DecompositionSolver" formalDisplayName="DecompositionSolver" modelMemberIdentifier="type:org.apache.commons.math3.linear.DecompositionSolver" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.DecompositionSolver"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="getP" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getP(()Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="getU" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getU(()Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="LUDecomposition" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.LUDecomposition((Lorg/apache/commons/math3/linear/RealMatrix;D)V)" modifiers="public,">
                    <parameter name="arg0">
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </parameter>
                    <parameter name="arg1">
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                            </containedType>
                        </typeReference>
                    </parameter>
                </method>
                <method deep="false" elementName="LUDecomposition" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.LUDecomposition((Lorg/apache/commons/math3/linear/RealMatrix;)V)" modifiers="public,">
                    <parameter name="matrix">
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </parameter>
                </method>
                <method deep="false" elementName="getPivot" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getPivot(()[I)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="1" many="true">
                            <rawType>
                                <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="getL" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getL(()Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
            </calledMethods>
        </method>
        <method deep="true" elementName="LUDecomposition" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.LUDecomposition((Lorg/apache/commons/math3/linear/RealMatrix;D)V)" modifiers="public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="constructors"/>
                <filter signature="methods named {method-name-pattern}" switchValues="LUDecomposition"/>
                <filter signature="methods of {method-owner}" switchValues="LUDecomposition"/>
                <filter signature="non default constructors"/>
                <filter signature="overloaded methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.LUDecomposition" elementName="LUDecomposition" formalDisplayName="LUDecomposition" modelMemberIdentifier="type:org.apache.commons.math3.linear.LUDecomposition" modifiers="public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.LUDecomposition"/>
            </declarer>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg1">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods>
                <method deep="false" elementName="getDeterminant" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getDeterminant(()D)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="getSolver" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getSolver(()Lorg/apache/commons/math3/linear/DecompositionSolver;)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.DecompositionSolver" elementName="DecompositionSolver" formalDisplayName="DecompositionSolver" modelMemberIdentifier="type:org.apache.commons.math3.linear.DecompositionSolver" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.DecompositionSolver"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.DecompositionSolver" elementName="DecompositionSolver" formalDisplayName="DecompositionSolver" modelMemberIdentifier="type:org.apache.commons.math3.linear.DecompositionSolver" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.DecompositionSolver"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="getP" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getP(()Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="getU" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getU(()Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="LUDecomposition" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.LUDecomposition((Lorg/apache/commons/math3/linear/RealMatrix;D)V)" modifiers="public,">
                    <parameter name="arg0">
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </parameter>
                    <parameter name="arg1">
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                            </containedType>
                        </typeReference>
                    </parameter>
                </method>
                <method deep="false" elementName="LUDecomposition" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.LUDecomposition((Lorg/apache/commons/math3/linear/RealMatrix;)V)" modifiers="public,">
                    <parameter name="matrix">
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </parameter>
                </method>
                <method deep="false" elementName="getPivot" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getPivot(()[I)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="1" many="true">
                            <rawType>
                                <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="getL" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getL(()Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
            </calledMethods>
        </method>
        <method deep="true" elementName="getL" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getL(()Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="getter methods"/>
                <filter signature="methods named {method-name-pattern}" switchValues="getL"/>
                <filter signature="methods of {method-owner}" switchValues="LUDecomposition"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.LUDecomposition" elementName="LUDecomposition" formalDisplayName="LUDecomposition" modelMemberIdentifier="type:org.apache.commons.math3.linear.LUDecomposition" modifiers="public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.LUDecomposition"/>
            </declarer>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </containedType>
                </typeReference>
            </return>
            <calledMethods>
                <method deep="false" elementName="getDeterminant" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getDeterminant(()D)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="getSolver" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getSolver(()Lorg/apache/commons/math3/linear/DecompositionSolver;)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.DecompositionSolver" elementName="DecompositionSolver" formalDisplayName="DecompositionSolver" modelMemberIdentifier="type:org.apache.commons.math3.linear.DecompositionSolver" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.DecompositionSolver"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.DecompositionSolver" elementName="DecompositionSolver" formalDisplayName="DecompositionSolver" modelMemberIdentifier="type:org.apache.commons.math3.linear.DecompositionSolver" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.DecompositionSolver"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="getP" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getP(()Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="getU" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getU(()Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="LUDecomposition" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.LUDecomposition((Lorg/apache/commons/math3/linear/RealMatrix;D)V)" modifiers="public,">
                    <parameter name="arg0">
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </parameter>
                    <parameter name="arg1">
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                            </containedType>
                        </typeReference>
                    </parameter>
                </method>
                <method deep="false" elementName="LUDecomposition" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.LUDecomposition((Lorg/apache/commons/math3/linear/RealMatrix;)V)" modifiers="public,">
                    <parameter name="matrix">
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </parameter>
                </method>
                <method deep="false" elementName="getPivot" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getPivot(()[I)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="1" many="true">
                            <rawType>
                                <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="getL" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getL(()Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
            </calledMethods>
        </method>
        <method deep="true" elementName="getU" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getU(()Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="getter methods"/>
                <filter signature="methods named {method-name-pattern}" switchValues="getU"/>
                <filter signature="methods of {method-owner}" switchValues="LUDecomposition"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.LUDecomposition" elementName="LUDecomposition" formalDisplayName="LUDecomposition" modelMemberIdentifier="type:org.apache.commons.math3.linear.LUDecomposition" modifiers="public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.LUDecomposition"/>
            </declarer>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </containedType>
                </typeReference>
            </return>
            <calledMethods>
                <method deep="false" elementName="getDeterminant" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getDeterminant(()D)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="getSolver" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getSolver(()Lorg/apache/commons/math3/linear/DecompositionSolver;)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.DecompositionSolver" elementName="DecompositionSolver" formalDisplayName="DecompositionSolver" modelMemberIdentifier="type:org.apache.commons.math3.linear.DecompositionSolver" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.DecompositionSolver"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.DecompositionSolver" elementName="DecompositionSolver" formalDisplayName="DecompositionSolver" modelMemberIdentifier="type:org.apache.commons.math3.linear.DecompositionSolver" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.DecompositionSolver"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="getP" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getP(()Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="getU" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getU(()Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="LUDecomposition" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.LUDecomposition((Lorg/apache/commons/math3/linear/RealMatrix;D)V)" modifiers="public,">
                    <parameter name="arg0">
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </parameter>
                    <parameter name="arg1">
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                            </containedType>
                        </typeReference>
                    </parameter>
                </method>
                <method deep="false" elementName="LUDecomposition" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.LUDecomposition((Lorg/apache/commons/math3/linear/RealMatrix;)V)" modifiers="public,">
                    <parameter name="matrix">
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </parameter>
                </method>
                <method deep="false" elementName="getPivot" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getPivot(()[I)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="1" many="true">
                            <rawType>
                                <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="getL" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getL(()Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
            </calledMethods>
        </method>
        <method deep="true" elementName="getP" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getP(()Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="getter methods"/>
                <filter signature="methods named {method-name-pattern}" switchValues="getP"/>
                <filter signature="methods of {method-owner}" switchValues="LUDecomposition"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.LUDecomposition" elementName="LUDecomposition" formalDisplayName="LUDecomposition" modelMemberIdentifier="type:org.apache.commons.math3.linear.LUDecomposition" modifiers="public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.LUDecomposition"/>
            </declarer>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </containedType>
                </typeReference>
            </return>
            <calledMethods>
                <method deep="false" elementName="getDeterminant" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getDeterminant(()D)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="getSolver" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getSolver(()Lorg/apache/commons/math3/linear/DecompositionSolver;)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.DecompositionSolver" elementName="DecompositionSolver" formalDisplayName="DecompositionSolver" modelMemberIdentifier="type:org.apache.commons.math3.linear.DecompositionSolver" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.DecompositionSolver"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.DecompositionSolver" elementName="DecompositionSolver" formalDisplayName="DecompositionSolver" modelMemberIdentifier="type:org.apache.commons.math3.linear.DecompositionSolver" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.DecompositionSolver"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="getP" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getP(()Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="getU" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getU(()Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="LUDecomposition" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.LUDecomposition((Lorg/apache/commons/math3/linear/RealMatrix;D)V)" modifiers="public,">
                    <parameter name="arg0">
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </parameter>
                    <parameter name="arg1">
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                            </containedType>
                        </typeReference>
                    </parameter>
                </method>
                <method deep="false" elementName="LUDecomposition" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.LUDecomposition((Lorg/apache/commons/math3/linear/RealMatrix;)V)" modifiers="public,">
                    <parameter name="matrix">
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </parameter>
                </method>
                <method deep="false" elementName="getPivot" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getPivot(()[I)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="1" many="true">
                            <rawType>
                                <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="getL" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getL(()Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
            </calledMethods>
        </method>
        <method deep="true" elementName="getPivot" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getPivot(()[I)" modifiers="public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="getter methods"/>
                <filter signature="methods named {method-name-pattern}" switchValues="getPivot"/>
                <filter signature="methods of {method-owner}" switchValues="LUDecomposition"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.LUDecomposition" elementName="LUDecomposition" formalDisplayName="LUDecomposition" modelMemberIdentifier="type:org.apache.commons.math3.linear.LUDecomposition" modifiers="public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.LUDecomposition"/>
            </declarer>
            <return>
                <typeReference arrayDimensions="1" many="true">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </return>
            <calledMethods>
                <method deep="false" elementName="getDeterminant" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getDeterminant(()D)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="getSolver" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getSolver(()Lorg/apache/commons/math3/linear/DecompositionSolver;)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.DecompositionSolver" elementName="DecompositionSolver" formalDisplayName="DecompositionSolver" modelMemberIdentifier="type:org.apache.commons.math3.linear.DecompositionSolver" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.DecompositionSolver"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.DecompositionSolver" elementName="DecompositionSolver" formalDisplayName="DecompositionSolver" modelMemberIdentifier="type:org.apache.commons.math3.linear.DecompositionSolver" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.DecompositionSolver"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="getP" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getP(()Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="getU" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getU(()Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="LUDecomposition" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.LUDecomposition((Lorg/apache/commons/math3/linear/RealMatrix;D)V)" modifiers="public,">
                    <parameter name="arg0">
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </parameter>
                    <parameter name="arg1">
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                            </containedType>
                        </typeReference>
                    </parameter>
                </method>
                <method deep="false" elementName="LUDecomposition" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.LUDecomposition((Lorg/apache/commons/math3/linear/RealMatrix;)V)" modifiers="public,">
                    <parameter name="matrix">
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </parameter>
                </method>
                <method deep="false" elementName="getPivot" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getPivot(()[I)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="1" many="true">
                            <rawType>
                                <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="getL" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getL(()Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
            </calledMethods>
        </method>
        <method deep="true" elementName="getDeterminant" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getDeterminant(()D)" modifiers="public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="getter methods"/>
                <filter signature="methods named {method-name-pattern}" switchValues="getDeterminant"/>
                <filter signature="methods of {method-owner}" switchValues="LUDecomposition"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.LUDecomposition" elementName="LUDecomposition" formalDisplayName="LUDecomposition" modelMemberIdentifier="type:org.apache.commons.math3.linear.LUDecomposition" modifiers="public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.LUDecomposition"/>
            </declarer>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </containedType>
                </typeReference>
            </return>
            <calledMethods>
                <method deep="false" elementName="getDeterminant" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getDeterminant(()D)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="getSolver" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getSolver(()Lorg/apache/commons/math3/linear/DecompositionSolver;)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.DecompositionSolver" elementName="DecompositionSolver" formalDisplayName="DecompositionSolver" modelMemberIdentifier="type:org.apache.commons.math3.linear.DecompositionSolver" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.DecompositionSolver"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.DecompositionSolver" elementName="DecompositionSolver" formalDisplayName="DecompositionSolver" modelMemberIdentifier="type:org.apache.commons.math3.linear.DecompositionSolver" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.DecompositionSolver"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="getP" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getP(()Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="getU" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getU(()Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="LUDecomposition" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.LUDecomposition((Lorg/apache/commons/math3/linear/RealMatrix;D)V)" modifiers="public,">
                    <parameter name="arg0">
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </parameter>
                    <parameter name="arg1">
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                            </containedType>
                        </typeReference>
                    </parameter>
                </method>
                <method deep="false" elementName="LUDecomposition" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.LUDecomposition((Lorg/apache/commons/math3/linear/RealMatrix;)V)" modifiers="public,">
                    <parameter name="matrix">
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </parameter>
                </method>
                <method deep="false" elementName="getPivot" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getPivot(()[I)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="1" many="true">
                            <rawType>
                                <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="getL" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getL(()Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
            </calledMethods>
        </method>
        <method deep="true" elementName="getSolver" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getSolver(()Lorg/apache/commons/math3/linear/DecompositionSolver;)" modifiers="public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="getter methods"/>
                <filter signature="methods named {method-name-pattern}" switchValues="getSolver"/>
                <filter signature="methods of {method-owner}" switchValues="LUDecomposition"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.LUDecomposition" elementName="LUDecomposition" formalDisplayName="LUDecomposition" modelMemberIdentifier="type:org.apache.commons.math3.linear.LUDecomposition" modifiers="public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.LUDecomposition"/>
            </declarer>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.DecompositionSolver" elementName="DecompositionSolver" formalDisplayName="DecompositionSolver" modelMemberIdentifier="type:org.apache.commons.math3.linear.DecompositionSolver" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.DecompositionSolver"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.DecompositionSolver" elementName="DecompositionSolver" formalDisplayName="DecompositionSolver" modelMemberIdentifier="type:org.apache.commons.math3.linear.DecompositionSolver" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.DecompositionSolver"/>
                    </containedType>
                </typeReference>
            </return>
            <calledMethods>
                <method deep="false" elementName="getDeterminant" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getDeterminant(()D)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="getSolver" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getSolver(()Lorg/apache/commons/math3/linear/DecompositionSolver;)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.DecompositionSolver" elementName="DecompositionSolver" formalDisplayName="DecompositionSolver" modelMemberIdentifier="type:org.apache.commons.math3.linear.DecompositionSolver" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.DecompositionSolver"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.DecompositionSolver" elementName="DecompositionSolver" formalDisplayName="DecompositionSolver" modelMemberIdentifier="type:org.apache.commons.math3.linear.DecompositionSolver" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.DecompositionSolver"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="getP" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getP(()Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="getU" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getU(()Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="LUDecomposition" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.LUDecomposition((Lorg/apache/commons/math3/linear/RealMatrix;D)V)" modifiers="public,">
                    <parameter name="arg0">
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </parameter>
                    <parameter name="arg1">
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                            </containedType>
                        </typeReference>
                    </parameter>
                </method>
                <method deep="false" elementName="LUDecomposition" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.LUDecomposition((Lorg/apache/commons/math3/linear/RealMatrix;)V)" modifiers="public,">
                    <parameter name="matrix">
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </parameter>
                </method>
                <method deep="false" elementName="getPivot" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getPivot(()[I)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="1" many="true">
                            <rawType>
                                <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
                <method deep="false" elementName="getL" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getL(()Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
                    <return>
                        <typeReference arrayDimensions="0" many="false">
                            <rawType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </rawType>
                            <containedType>
                                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                            </containedType>
                        </typeReference>
                    </return>
                </method>
            </calledMethods>
        </method>
        <type deep="true" displayTextTemplate="org.apache.commons.math3.linear.LUDecomposition.Solver" elementName="Solver" fileNameKey="org.apache.commons.math3.linear.LUDecomposition.Solver.xml" formalDisplayName="Solver" isBinary="true" isClass="true" isDeprecated="false" isEnum="false" isInterface="false" isPrimitive="false" isTopLevel="false" javaProjectName="DistributedStorage" modelMemberIdentifier="type:org.apache.commons.math3.linear.LUDecomposition$Solver" modifiers="private,static," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.LUDecomposition$Solver">
            <filters>
                <filter signature="all classes"/>
                <filter signature="all types"/>
                <filter signature="bytecode types"/>
                <filter signature="concrete classes"/>
                <filter signature="inner types named {type-name}" switchValues="Solver"/>
                <filter signature="members of package {package-name}" switchValues="org.apache.commons.math3.linear"/>
                <filter signature="non java star package types"/>
                <filter signature="private types"/>
                <filter signature="types named {type-name-pattern}" switchValues="Solver"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.LUDecomposition" elementName="LUDecomposition" formalDisplayName="LUDecomposition" modelMemberIdentifier="type:org.apache.commons.math3.linear.LUDecomposition" modifiers="public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.LUDecomposition"/>
            </declarer>
            <outermostType>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.LUDecomposition" elementName="LUDecomposition" formalDisplayName="LUDecomposition" modelMemberIdentifier="type:org.apache.commons.math3.linear.LUDecomposition" modifiers="public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.LUDecomposition"/>
            </outermostType>
            <field deep="true" elementName="lu" fieldLineTooltipDescription="Solver.lu&#10;&#9;references many&#10;double[][]" isBinary="true" isDeprecated="false" modelMemberIdentifier="field:org.apache.commons.math3.linear.LUDecomposition$Solver.lu" modifiers="final,private,">
                <filters>
                    <filter signature="all fields"/>
                    <filter signature="fields named {field-name-pattern}" switchValues="lu"/>
                    <filter signature="one to many fields"/>
                    <filter signature="private fields"/>
                </filters>
                <declarer>
                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.LUDecomposition.Solver" elementName="Solver" formalDisplayName="Solver" modelMemberIdentifier="type:org.apache.commons.math3.linear.LUDecomposition$Solver" modifiers="private,static," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.LUDecomposition$Solver"/>
                </declarer>
                <typeReference>
                    <typeReference arrayDimensions="2" many="true">
                        <rawType>
                            <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                        </rawType>
                        <containedType>
                            <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                        </containedType>
                    </typeReference>
                </typeReference>
            </field>
            <field deep="true" elementName="pivot" fieldLineTooltipDescription="Solver.pivot&#10;&#9;references many&#10;int[]" isBinary="true" isDeprecated="false" modelMemberIdentifier="field:org.apache.commons.math3.linear.LUDecomposition$Solver.pivot" modifiers="final,private,">
                <filters>
                    <filter signature="all fields"/>
                    <filter signature="fields named {field-name-pattern}" switchValues="pivot"/>
                    <filter signature="one to many fields"/>
                    <filter signature="private fields"/>
                </filters>
                <declarer>
                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.LUDecomposition.Solver" elementName="Solver" formalDisplayName="Solver" modelMemberIdentifier="type:org.apache.commons.math3.linear.LUDecomposition$Solver" modifiers="private,static," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.LUDecomposition$Solver"/>
                </declarer>
                <typeReference>
                    <typeReference arrayDimensions="1" many="true">
                        <rawType>
                            <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                        </rawType>
                        <containedType>
                            <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                        </containedType>
                    </typeReference>
                </typeReference>
            </field>
            <field deep="true" elementName="singular" fieldLineTooltipDescription="Solver.singular&#10;&#9;references one&#10;boolean" isBinary="true" isDeprecated="false" modelMemberIdentifier="field:org.apache.commons.math3.linear.LUDecomposition$Solver.singular" modifiers="final,private,">
                <filters>
                    <filter signature="all fields"/>
                    <filter signature="fields named {field-name-pattern}" switchValues="singular"/>
                    <filter signature="private fields"/>
                </filters>
                <declarer>
                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.LUDecomposition.Solver" elementName="Solver" formalDisplayName="Solver" modelMemberIdentifier="type:org.apache.commons.math3.linear.LUDecomposition$Solver" modifiers="private,static," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.LUDecomposition$Solver"/>
                </declarer>
                <typeReference>
                    <typeReference arrayDimensions="0" many="false">
                        <rawType>
                            <type deep="false" displayTextTemplate="boolean" elementName="boolean" formalDisplayName="boolean" modelMemberIdentifier="type:boolean" modifiers="" packageName="" qualifiedName="boolean"/>
                        </rawType>
                        <containedType>
                            <type deep="false" displayTextTemplate="boolean" elementName="boolean" formalDisplayName="boolean" modelMemberIdentifier="type:boolean" modifiers="" packageName="" qualifiedName="boolean"/>
                        </containedType>
                    </typeReference>
                </typeReference>
            </field>
            <method deep="true" elementName="Solver" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.Solver(([[D[IZ)V)" modifiers="private,">
                <filters>
                    <filter signature="all methods"/>
                    <filter signature="constructors"/>
                    <filter signature="methods named {method-name-pattern}" switchValues="Solver"/>
                    <filter signature="methods of {method-owner}" switchValues="Solver"/>
                    <filter signature="non default constructors"/>
                    <filter signature="overloaded methods"/>
                    <filter signature="private methods"/>
                </filters>
                <declarer>
                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.LUDecomposition.Solver" elementName="Solver" formalDisplayName="Solver" modelMemberIdentifier="type:org.apache.commons.math3.linear.LUDecomposition$Solver" modifiers="private,static," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.LUDecomposition$Solver"/>
                </declarer>
                <parameter name="lu">
                    <typeReference arrayDimensions="2" many="true">
                        <rawType>
                            <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                        </rawType>
                        <containedType>
                            <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                        </containedType>
                    </typeReference>
                </parameter>
                <parameter name="pivot">
                    <typeReference arrayDimensions="1" many="true">
                        <rawType>
                            <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                        </rawType>
                        <containedType>
                            <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                        </containedType>
                    </typeReference>
                </parameter>
                <parameter name="singular">
                    <typeReference arrayDimensions="0" many="false">
                        <rawType>
                            <type deep="false" displayTextTemplate="boolean" elementName="boolean" formalDisplayName="boolean" modelMemberIdentifier="type:boolean" modifiers="" packageName="" qualifiedName="boolean"/>
                        </rawType>
                        <containedType>
                            <type deep="false" displayTextTemplate="boolean" elementName="boolean" formalDisplayName="boolean" modelMemberIdentifier="type:boolean" modifiers="" packageName="" qualifiedName="boolean"/>
                        </containedType>
                    </typeReference>
                </parameter>
                <calledMethods>
                    <method deep="false" elementName="isNonSingular" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.isNonSingular(()Z)" modifiers="public,">
                        <return>
                            <typeReference arrayDimensions="0" many="false">
                                <rawType>
                                    <type deep="false" displayTextTemplate="boolean" elementName="boolean" formalDisplayName="boolean" modelMemberIdentifier="type:boolean" modifiers="" packageName="" qualifiedName="boolean"/>
                                </rawType>
                                <containedType>
                                    <type deep="false" displayTextTemplate="boolean" elementName="boolean" formalDisplayName="boolean" modelMemberIdentifier="type:boolean" modifiers="" packageName="" qualifiedName="boolean"/>
                                </containedType>
                            </typeReference>
                        </return>
                    </method>
                    <method deep="false" elementName="solve" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.solve((Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/RealVector;)" modifiers="public,">
                        <return>
                            <typeReference arrayDimensions="0" many="false">
                                <rawType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                                </rawType>
                                <containedType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                                </containedType>
                            </typeReference>
                        </return>
                        <parameter name="arg0">
                            <typeReference arrayDimensions="0" many="false">
                                <rawType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                                </rawType>
                                <containedType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                                </containedType>
                            </typeReference>
                        </parameter>
                    </method>
                    <method deep="false" elementName="solve" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.solve((Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
                        <return>
                            <typeReference arrayDimensions="0" many="false">
                                <rawType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                                </rawType>
                                <containedType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                                </containedType>
                            </typeReference>
                        </return>
                        <parameter name="arg0">
                            <typeReference arrayDimensions="0" many="false">
                                <rawType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                                </rawType>
                                <containedType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                                </containedType>
                            </typeReference>
                        </parameter>
                    </method>
                    <method deep="false" elementName="LUDecomposition$Solver" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.LUDecomposition$Solver()" modifiers=""/>
                    <method deep="false" elementName="getInverse" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.getInverse(()Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
                        <return>
                            <typeReference arrayDimensions="0" many="false">
                                <rawType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                                </rawType>
                                <containedType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                                </containedType>
                            </typeReference>
                        </return>
                    </method>
                </calledMethods>
            </method>
            <method deep="true" elementName="isNonSingular" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.isNonSingular(()Z)" modifiers="public,">
                <filters>
                    <filter signature="all methods"/>
                    <filter signature="all operations"/>
                    <filter signature="getter methods"/>
                    <filter signature="methods named {method-name-pattern}" switchValues="isNonSingular"/>
                    <filter signature="methods of {method-owner}" switchValues="Solver"/>
                    <filter signature="public methods"/>
                </filters>
                <declarer>
                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.LUDecomposition.Solver" elementName="Solver" formalDisplayName="Solver" modelMemberIdentifier="type:org.apache.commons.math3.linear.LUDecomposition$Solver" modifiers="private,static," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.LUDecomposition$Solver"/>
                </declarer>
                <return>
                    <typeReference arrayDimensions="0" many="false">
                        <rawType>
                            <type deep="false" displayTextTemplate="boolean" elementName="boolean" formalDisplayName="boolean" modelMemberIdentifier="type:boolean" modifiers="" packageName="" qualifiedName="boolean"/>
                        </rawType>
                        <containedType>
                            <type deep="false" displayTextTemplate="boolean" elementName="boolean" formalDisplayName="boolean" modelMemberIdentifier="type:boolean" modifiers="" packageName="" qualifiedName="boolean"/>
                        </containedType>
                    </typeReference>
                </return>
                <calledMethods>
                    <method deep="false" elementName="isNonSingular" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.isNonSingular(()Z)" modifiers="public,">
                        <return>
                            <typeReference arrayDimensions="0" many="false">
                                <rawType>
                                    <type deep="false" displayTextTemplate="boolean" elementName="boolean" formalDisplayName="boolean" modelMemberIdentifier="type:boolean" modifiers="" packageName="" qualifiedName="boolean"/>
                                </rawType>
                                <containedType>
                                    <type deep="false" displayTextTemplate="boolean" elementName="boolean" formalDisplayName="boolean" modelMemberIdentifier="type:boolean" modifiers="" packageName="" qualifiedName="boolean"/>
                                </containedType>
                            </typeReference>
                        </return>
                    </method>
                    <method deep="false" elementName="solve" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.solve((Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/RealVector;)" modifiers="public,">
                        <return>
                            <typeReference arrayDimensions="0" many="false">
                                <rawType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                                </rawType>
                                <containedType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                                </containedType>
                            </typeReference>
                        </return>
                        <parameter name="arg0">
                            <typeReference arrayDimensions="0" many="false">
                                <rawType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                                </rawType>
                                <containedType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                                </containedType>
                            </typeReference>
                        </parameter>
                    </method>
                    <method deep="false" elementName="solve" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.solve((Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
                        <return>
                            <typeReference arrayDimensions="0" many="false">
                                <rawType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                                </rawType>
                                <containedType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                                </containedType>
                            </typeReference>
                        </return>
                        <parameter name="arg0">
                            <typeReference arrayDimensions="0" many="false">
                                <rawType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                                </rawType>
                                <containedType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                                </containedType>
                            </typeReference>
                        </parameter>
                    </method>
                    <method deep="false" elementName="LUDecomposition$Solver" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.LUDecomposition$Solver()" modifiers=""/>
                    <method deep="false" elementName="getInverse" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.getInverse(()Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
                        <return>
                            <typeReference arrayDimensions="0" many="false">
                                <rawType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                                </rawType>
                                <containedType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                                </containedType>
                            </typeReference>
                        </return>
                    </method>
                </calledMethods>
            </method>
            <method deep="true" elementName="solve" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.solve((Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/RealVector;)" modifiers="public,">
                <filters>
                    <filter signature="all methods"/>
                    <filter signature="all operations"/>
                    <filter signature="methods named {method-name-pattern}" switchValues="solve"/>
                    <filter signature="methods of {method-owner}" switchValues="Solver"/>
                    <filter signature="overloaded methods"/>
                    <filter signature="public methods"/>
                </filters>
                <declarer>
                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.LUDecomposition.Solver" elementName="Solver" formalDisplayName="Solver" modelMemberIdentifier="type:org.apache.commons.math3.linear.LUDecomposition$Solver" modifiers="private,static," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.LUDecomposition$Solver"/>
                </declarer>
                <return>
                    <typeReference arrayDimensions="0" many="false">
                        <rawType>
                            <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                        </rawType>
                        <containedType>
                            <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                        </containedType>
                    </typeReference>
                </return>
                <parameter name="arg0">
                    <typeReference arrayDimensions="0" many="false">
                        <rawType>
                            <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                        </rawType>
                        <containedType>
                            <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                        </containedType>
                    </typeReference>
                </parameter>
                <calledMethods>
                    <method deep="false" elementName="isNonSingular" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.isNonSingular(()Z)" modifiers="public,">
                        <return>
                            <typeReference arrayDimensions="0" many="false">
                                <rawType>
                                    <type deep="false" displayTextTemplate="boolean" elementName="boolean" formalDisplayName="boolean" modelMemberIdentifier="type:boolean" modifiers="" packageName="" qualifiedName="boolean"/>
                                </rawType>
                                <containedType>
                                    <type deep="false" displayTextTemplate="boolean" elementName="boolean" formalDisplayName="boolean" modelMemberIdentifier="type:boolean" modifiers="" packageName="" qualifiedName="boolean"/>
                                </containedType>
                            </typeReference>
                        </return>
                    </method>
                    <method deep="false" elementName="solve" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.solve((Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/RealVector;)" modifiers="public,">
                        <return>
                            <typeReference arrayDimensions="0" many="false">
                                <rawType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                                </rawType>
                                <containedType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                                </containedType>
                            </typeReference>
                        </return>
                        <parameter name="arg0">
                            <typeReference arrayDimensions="0" many="false">
                                <rawType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                                </rawType>
                                <containedType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                                </containedType>
                            </typeReference>
                        </parameter>
                    </method>
                    <method deep="false" elementName="solve" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.solve((Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
                        <return>
                            <typeReference arrayDimensions="0" many="false">
                                <rawType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                                </rawType>
                                <containedType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                                </containedType>
                            </typeReference>
                        </return>
                        <parameter name="arg0">
                            <typeReference arrayDimensions="0" many="false">
                                <rawType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                                </rawType>
                                <containedType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                                </containedType>
                            </typeReference>
                        </parameter>
                    </method>
                    <method deep="false" elementName="LUDecomposition$Solver" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.LUDecomposition$Solver()" modifiers=""/>
                    <method deep="false" elementName="getInverse" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.getInverse(()Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
                        <return>
                            <typeReference arrayDimensions="0" many="false">
                                <rawType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                                </rawType>
                                <containedType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                                </containedType>
                            </typeReference>
                        </return>
                    </method>
                </calledMethods>
            </method>
            <method deep="true" elementName="solve" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.solve((Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
                <filters>
                    <filter signature="all methods"/>
                    <filter signature="all operations"/>
                    <filter signature="methods named {method-name-pattern}" switchValues="solve"/>
                    <filter signature="methods of {method-owner}" switchValues="Solver"/>
                    <filter signature="overloaded methods"/>
                    <filter signature="public methods"/>
                </filters>
                <declarer>
                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.LUDecomposition.Solver" elementName="Solver" formalDisplayName="Solver" modelMemberIdentifier="type:org.apache.commons.math3.linear.LUDecomposition$Solver" modifiers="private,static," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.LUDecomposition$Solver"/>
                </declarer>
                <return>
                    <typeReference arrayDimensions="0" many="false">
                        <rawType>
                            <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                        </rawType>
                        <containedType>
                            <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                        </containedType>
                    </typeReference>
                </return>
                <parameter name="arg0">
                    <typeReference arrayDimensions="0" many="false">
                        <rawType>
                            <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                        </rawType>
                        <containedType>
                            <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                        </containedType>
                    </typeReference>
                </parameter>
                <calledMethods>
                    <method deep="false" elementName="isNonSingular" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.isNonSingular(()Z)" modifiers="public,">
                        <return>
                            <typeReference arrayDimensions="0" many="false">
                                <rawType>
                                    <type deep="false" displayTextTemplate="boolean" elementName="boolean" formalDisplayName="boolean" modelMemberIdentifier="type:boolean" modifiers="" packageName="" qualifiedName="boolean"/>
                                </rawType>
                                <containedType>
                                    <type deep="false" displayTextTemplate="boolean" elementName="boolean" formalDisplayName="boolean" modelMemberIdentifier="type:boolean" modifiers="" packageName="" qualifiedName="boolean"/>
                                </containedType>
                            </typeReference>
                        </return>
                    </method>
                    <method deep="false" elementName="solve" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.solve((Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/RealVector;)" modifiers="public,">
                        <return>
                            <typeReference arrayDimensions="0" many="false">
                                <rawType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                                </rawType>
                                <containedType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                                </containedType>
                            </typeReference>
                        </return>
                        <parameter name="arg0">
                            <typeReference arrayDimensions="0" many="false">
                                <rawType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                                </rawType>
                                <containedType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                                </containedType>
                            </typeReference>
                        </parameter>
                    </method>
                    <method deep="false" elementName="solve" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.solve((Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
                        <return>
                            <typeReference arrayDimensions="0" many="false">
                                <rawType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                                </rawType>
                                <containedType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                                </containedType>
                            </typeReference>
                        </return>
                        <parameter name="arg0">
                            <typeReference arrayDimensions="0" many="false">
                                <rawType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                                </rawType>
                                <containedType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                                </containedType>
                            </typeReference>
                        </parameter>
                    </method>
                    <method deep="false" elementName="LUDecomposition$Solver" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.LUDecomposition$Solver()" modifiers=""/>
                    <method deep="false" elementName="getInverse" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.getInverse(()Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
                        <return>
                            <typeReference arrayDimensions="0" many="false">
                                <rawType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                                </rawType>
                                <containedType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                                </containedType>
                            </typeReference>
                        </return>
                    </method>
                </calledMethods>
            </method>
            <method deep="true" elementName="getInverse" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.getInverse(()Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
                <filters>
                    <filter signature="all methods"/>
                    <filter signature="all operations"/>
                    <filter signature="getter methods"/>
                    <filter signature="methods named {method-name-pattern}" switchValues="getInverse"/>
                    <filter signature="methods of {method-owner}" switchValues="Solver"/>
                    <filter signature="public methods"/>
                </filters>
                <declarer>
                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.LUDecomposition.Solver" elementName="Solver" formalDisplayName="Solver" modelMemberIdentifier="type:org.apache.commons.math3.linear.LUDecomposition$Solver" modifiers="private,static," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.LUDecomposition$Solver"/>
                </declarer>
                <return>
                    <typeReference arrayDimensions="0" many="false">
                        <rawType>
                            <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                        </rawType>
                        <containedType>
                            <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                        </containedType>
                    </typeReference>
                </return>
                <calledMethods>
                    <method deep="false" elementName="isNonSingular" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.isNonSingular(()Z)" modifiers="public,">
                        <return>
                            <typeReference arrayDimensions="0" many="false">
                                <rawType>
                                    <type deep="false" displayTextTemplate="boolean" elementName="boolean" formalDisplayName="boolean" modelMemberIdentifier="type:boolean" modifiers="" packageName="" qualifiedName="boolean"/>
                                </rawType>
                                <containedType>
                                    <type deep="false" displayTextTemplate="boolean" elementName="boolean" formalDisplayName="boolean" modelMemberIdentifier="type:boolean" modifiers="" packageName="" qualifiedName="boolean"/>
                                </containedType>
                            </typeReference>
                        </return>
                    </method>
                    <method deep="false" elementName="solve" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.solve((Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/RealVector;)" modifiers="public,">
                        <return>
                            <typeReference arrayDimensions="0" many="false">
                                <rawType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                                </rawType>
                                <containedType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                                </containedType>
                            </typeReference>
                        </return>
                        <parameter name="arg0">
                            <typeReference arrayDimensions="0" many="false">
                                <rawType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                                </rawType>
                                <containedType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                                </containedType>
                            </typeReference>
                        </parameter>
                    </method>
                    <method deep="false" elementName="solve" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.solve((Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
                        <return>
                            <typeReference arrayDimensions="0" many="false">
                                <rawType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                                </rawType>
                                <containedType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                                </containedType>
                            </typeReference>
                        </return>
                        <parameter name="arg0">
                            <typeReference arrayDimensions="0" many="false">
                                <rawType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                                </rawType>
                                <containedType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                                </containedType>
                            </typeReference>
                        </parameter>
                    </method>
                    <method deep="false" elementName="LUDecomposition$Solver" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.LUDecomposition$Solver()" modifiers=""/>
                    <method deep="false" elementName="getInverse" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.getInverse(()Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
                        <return>
                            <typeReference arrayDimensions="0" many="false">
                                <rawType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                                </rawType>
                                <containedType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                                </containedType>
                            </typeReference>
                        </return>
                    </method>
                </calledMethods>
            </method>
            <method deep="true" elementName="Solver" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.Solver(([[D[IZLorg/apache/commons/math3/linear/LUDecomposition$1;)V)" modifiers="">
                <filters>
                    <filter signature="all methods"/>
                    <filter signature="constructors"/>
                    <filter signature="methods named {method-name-pattern}" switchValues="Solver"/>
                    <filter signature="methods of {method-owner}" switchValues="Solver"/>
                    <filter signature="non default constructors"/>
                    <filter signature="overloaded methods"/>
                    <filter signature="package visible methods"/>
                </filters>
                <declarer>
                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.LUDecomposition.Solver" elementName="Solver" formalDisplayName="Solver" modelMemberIdentifier="type:org.apache.commons.math3.linear.LUDecomposition$Solver" modifiers="private,static," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.LUDecomposition$Solver"/>
                </declarer>
                <parameter name="arg0">
                    <typeReference arrayDimensions="2" many="true">
                        <rawType>
                            <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                        </rawType>
                        <containedType>
                            <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                        </containedType>
                    </typeReference>
                </parameter>
                <parameter name="arg1">
                    <typeReference arrayDimensions="1" many="true">
                        <rawType>
                            <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                        </rawType>
                        <containedType>
                            <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                        </containedType>
                    </typeReference>
                </parameter>
                <parameter name="arg2">
                    <typeReference arrayDimensions="0" many="false">
                        <rawType>
                            <type deep="false" displayTextTemplate="boolean" elementName="boolean" formalDisplayName="boolean" modelMemberIdentifier="type:boolean" modifiers="" packageName="" qualifiedName="boolean"/>
                        </rawType>
                        <containedType>
                            <type deep="false" displayTextTemplate="boolean" elementName="boolean" formalDisplayName="boolean" modelMemberIdentifier="type:boolean" modifiers="" packageName="" qualifiedName="boolean"/>
                        </containedType>
                    </typeReference>
                </parameter>
                <parameter name="arg3">
                    <typeReference arrayDimensions="0" many="false">
                        <rawType>
                            <type deep="false" displayTextTemplate="new org.apache.commons.math3.linear.LUDecomposition(){}" elementName="new" formalDisplayName="new org.apache.commons.math3.linear.LUDecomposition(){}" modelMemberIdentifier="type:new org.apache.commons.math3.linear.LUDecomposition(){}" modifiers="" packageName="" qualifiedName="new org.apache.commons.math3.linear.LUDecomposition(){}"/>
                        </rawType>
                        <containedType>
                            <type deep="false" displayTextTemplate="new org.apache.commons.math3.linear.LUDecomposition(){}" elementName="new" formalDisplayName="new org.apache.commons.math3.linear.LUDecomposition(){}" modelMemberIdentifier="type:new org.apache.commons.math3.linear.LUDecomposition(){}" modifiers="" packageName="" qualifiedName="new org.apache.commons.math3.linear.LUDecomposition(){}"/>
                        </containedType>
                    </typeReference>
                </parameter>
                <calledMethods>
                    <method deep="false" elementName="isNonSingular" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.isNonSingular(()Z)" modifiers="public,">
                        <return>
                            <typeReference arrayDimensions="0" many="false">
                                <rawType>
                                    <type deep="false" displayTextTemplate="boolean" elementName="boolean" formalDisplayName="boolean" modelMemberIdentifier="type:boolean" modifiers="" packageName="" qualifiedName="boolean"/>
                                </rawType>
                                <containedType>
                                    <type deep="false" displayTextTemplate="boolean" elementName="boolean" formalDisplayName="boolean" modelMemberIdentifier="type:boolean" modifiers="" packageName="" qualifiedName="boolean"/>
                                </containedType>
                            </typeReference>
                        </return>
                    </method>
                    <method deep="false" elementName="solve" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.solve((Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/RealVector;)" modifiers="public,">
                        <return>
                            <typeReference arrayDimensions="0" many="false">
                                <rawType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                                </rawType>
                                <containedType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                                </containedType>
                            </typeReference>
                        </return>
                        <parameter name="arg0">
                            <typeReference arrayDimensions="0" many="false">
                                <rawType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                                </rawType>
                                <containedType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                                </containedType>
                            </typeReference>
                        </parameter>
                    </method>
                    <method deep="false" elementName="solve" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.solve((Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
                        <return>
                            <typeReference arrayDimensions="0" many="false">
                                <rawType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                                </rawType>
                                <containedType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                                </containedType>
                            </typeReference>
                        </return>
                        <parameter name="arg0">
                            <typeReference arrayDimensions="0" many="false">
                                <rawType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                                </rawType>
                                <containedType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                                </containedType>
                            </typeReference>
                        </parameter>
                    </method>
                    <method deep="false" elementName="LUDecomposition$Solver" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.LUDecomposition$Solver()" modifiers=""/>
                    <method deep="false" elementName="getInverse" modelMemberIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.getInverse(()Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="public,">
                        <return>
                            <typeReference arrayDimensions="0" many="false">
                                <rawType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                                </rawType>
                                <containedType>
                                    <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                                </containedType>
                            </typeReference>
                        </return>
                    </method>
                </calledMethods>
            </method>
            <nonRecursiveSubtypes/>
            <recursiveSubtypes/>
            <nonRecursiveSupertypes>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.DecompositionSolver" elementName="DecompositionSolver" formalDisplayName="DecompositionSolver" modelMemberIdentifier="type:org.apache.commons.math3.linear.DecompositionSolver" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.DecompositionSolver"/>
                <type deep="false" displayTextTemplate="java.lang.Object" elementName="Object" formalDisplayName="Object" modelMemberIdentifier="type:java.lang.Object" modifiers="public," packageName="java.lang" qualifiedName="java.lang.Object"/>
            </nonRecursiveSupertypes>
            <recursiveSupertypes>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.DecompositionSolver" elementName="DecompositionSolver" formalDisplayName="DecompositionSolver" modelMemberIdentifier="type:org.apache.commons.math3.linear.DecompositionSolver" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.DecompositionSolver"/>
                <type deep="false" displayTextTemplate="java.lang.Object" elementName="Object" formalDisplayName="Object" modelMemberIdentifier="type:java.lang.Object" modifiers="public," packageName="java.lang" qualifiedName="java.lang.Object"/>
            </recursiveSupertypes>
            <outwardDependencies/>
        </type>
        <nonRecursiveSubtypes/>
        <recursiveSubtypes/>
        <nonRecursiveSupertypes>
            <type deep="false" displayTextTemplate="java.lang.Object" elementName="Object" formalDisplayName="Object" modelMemberIdentifier="type:java.lang.Object" modifiers="public," packageName="java.lang" qualifiedName="java.lang.Object"/>
        </nonRecursiveSupertypes>
        <recursiveSupertypes>
            <type deep="false" displayTextTemplate="java.lang.Object" elementName="Object" formalDisplayName="Object" modelMemberIdentifier="type:java.lang.Object" modifiers="public," packageName="java.lang" qualifiedName="java.lang.Object"/>
        </recursiveSupertypes>
        <outwardDependencies/>
    </type>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAABx0lEQVR4nOWU3yuDYRTH98e49SNqJTUSr0zaWtpGtjaWMWRujNm0lzGyzI/CWDNLKLXwJhOmKNqFSC5GJhThhrlx+fU+z7IkF6+59K3Tec7znD6dc97nfUSibzq+O4fG346KcR3yB+SQjmppTPa/5woWuzFOYY0LbbCEOlNG4rzeSpDztKC5jjKwnB2rpyvYv9rD4fUB9YGjWTg4BzI6JL+DkzZJpV0hCyKX2/hJOxdb6F6z0soFj6Vm1gx9wIi5o5kUaDu2ibGIG9zZKo1vX27gCvfTvPqgRRiY8WihmNTCfzhPIVfPcej8DSlrXTTDGDRRq/bqQfIFgUl7OT0MPJFkxQfxKLLspci0lVAj6zy2HGKnFJJBGb+uEF5xgUvG3wAXBd+93KNwSAGJS04tGA1h5YSD2teKMo9aeMVkZpJBObQ+ExLvb8mPFdtH85IVI7vJLl7fE9Dw54pJHVqWWWHg2FOcXqWqKT1/M1hc8jP+qofEI9w7E1B7DTTvVz9LDzeKLBsDZkQFXaAJtnUn+sNu6kms4qHiPhlInmDoV3i2neHbrYNyxgAlDyOexGQ/LeinSJtV0yYUDalRPFxDfa3vj2/F/9YHYK+OD5EVjdEAAAAASUVORK5CYII=" height="16" modelElementIdentifier="type:org.apache.commons.math3.linear.LUDecomposition" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAAiElEQVR4nGNgIAL8B4IPe47/P86kC8YgNgjA5DSSpv0Prl8CxiA2TI4og0EGwgCMDZMDGYgOyDIYWTO6wUQZSGpQgGiSDUYG+IKCZIOJCWOiDLvh5P8fhkHgWe8CeFCA2OhBQZLBj8sbwBpANIhPkjfxGYwMqGowzMXPOyZQ12B0TBWDR8HgBwDoDS/D0GPxBAAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="field:org.apache.commons.math3.linear.LUDecomposition.DEFAULT_TOO_SMALL" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAAMklEQVR4nGNgGAWjgGhww8n/PzqmmsGPyxv+gwCIpqrByIAmLn7eMYG6BtMkjEfB4AcAIhZF9iVxU3wAAAAASUVORK5CYII=" height="16" modelElementIdentifier="field:org.apache.commons.math3.linear.LUDecomposition.cachedL" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAAMklEQVR4nGNgGAWjgGhww8n/PzqmmsGPyxv+gwCIpqrByIAmLn7eMYG6BtMkjEfB4AcAIhZF9iVxU3wAAAAASUVORK5CYII=" height="16" modelElementIdentifier="field:org.apache.commons.math3.linear.LUDecomposition.cachedP" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAAMklEQVR4nGNgGAWjgGhww8n/PzqmmsGPyxv+gwCIpqrByIAmLn7eMYG6BtMkjEfB4AcAIhZF9iVxU3wAAAAASUVORK5CYII=" height="16" modelElementIdentifier="field:org.apache.commons.math3.linear.LUDecomposition.cachedU" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAAMklEQVR4nGNgGAWjgGhww8n/PzqmmsGPyxv+gwCIpqrByIAmLn7eMYG6BtMkjEfB4AcAIhZF9iVxU3wAAAAASUVORK5CYII=" height="16" modelElementIdentifier="field:org.apache.commons.math3.linear.LUDecomposition.even" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAAZUlEQVR4nGNgoBD8BwKNpGn/g+uXgDGIDQKUmgs2GGQgOqC6wRQbiGwwLChANFUNppmLYQYTpeGGk/9/dIzLYJJSAsigx+UNYA0gGpfBJAOQQciAqgbDXPy8YwJ1DSYmjEfBMAQA9rqpfFpakWAAAAAASUVORK5CYII=" height="16" modelElementIdentifier="field:org.apache.commons.math3.linear.LUDecomposition.lu" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAAZUlEQVR4nGNgoBD8BwKNpGn/g+uXgDGIDQKUmgs2GGQgOqC6wRQbiGwwLChANFUNppmLYQYTpeGGk/9/dIzLYJJSAsigx+UNYA0gGpfBJAOQQciAqgbDXPy8YwJ1DSYmjEfBMAQA9rqpfFpakWAAAAAASUVORK5CYII=" height="16" modelElementIdentifier="field:org.apache.commons.math3.linear.LUDecomposition.pivot" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAAMklEQVR4nGNgGAWjgGhww8n/PzqmmsGPyxv+gwCIpqrByIAmLn7eMYG6BtMkjEfB4AcAIhZF9iVxU3wAAAAASUVORK5CYII=" height="16" modelElementIdentifier="field:org.apache.commons.math3.linear.LUDecomposition.singular" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA6ElEQVR4nGNgoBD8BwL99V7/FatM/ivVmf7f/fbof0rNBAOHbZFwA/sfLgCzqWowMhgaBhMdFKXbJ/xnbfT8rzc14T+IjUsdSZHnu7j4f/yqkv9bLs39P+PYBDAbJIbPcILBULit93/Y8oL/q8/PRMIzwGIgObzexAeYGzz+N+1t+t+yrwWB97eAxUByZBss2xP2P2kV0HUby6C4FEyDxEByZBucsq71v/2M+P8dOxv/d+xo/N8JxCC2/fSE/yA5sg0GAec5Of+9Zqf+n76343/T1nowGyRGkaEwkL+xC57cQGyqGDoyAQA+++MipdXKzwAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.LUDecomposition((Lorg/apache/commons/math3/linear/RealMatrix;)V)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA6ElEQVR4nGNgoBD8BwL99V7/FatM/ivVmf7f/fbof0rNBAOHbZFwA/sfLgCzqWowMhgaBhMdFKXbJ/xnbfT8rzc14T+IjUsdSZHnu7j4f/yqkv9bLs39P+PYBDAbJIbPcILBULit93/Y8oL/q8/PRMIzwGIgObzexAeYGzz+N+1t+t+yrwWB97eAxUByZBss2xP2P2kV0HUby6C4FEyDxEByZBucsq71v/2M+P8dOxv/d+xo/N8JxCC2/fSE/yA5sg0GAec5Of+9Zqf+n76343/T1nowGyRGkaEwkL+xC57cQGyqGDoyAQA+++MipdXKzwAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.LUDecomposition((Lorg/apache/commons/math3/linear/RealMatrix;D)V)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAAuElEQVR4nGNgGAXDD5Run/CftdHzv97UhP8gNlUM9V1c/D9+Vcn/LZfm/p9xbAKYDRKjyNDCbb3/w5YX/F99fiYSngEWA8mRbTBzg8f/pr1N/1v2tSDw/hawGEiObINle8L+J60Cum5jGRSXgmmQGEiObINT1rX+t58R/79jZ+P/jh2N/zuBGMS2n57wHyRHtsEg4Dwn57/X7NT/0/d2/G/aWg9mg8QoMhQG8jd2wZMbiE0VQ0cmAAD3yYO+kqE/HwAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getDeterminant(()D)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAAuElEQVR4nGNgGAXDD5Run/CftdHzv97UhP8gNlUM9V1c/D9+Vcn/LZfm/p9xbAKYDRKjyNDCbb3/w5YX/F99fiYSngEWA8mRbTBzg8f/pr1N/1v2tSDw/hawGEiObINle8L+J60Cum5jGRSXgmmQGEiObINT1rX+t58R/79jZ+P/jh2N/zuBGMS2n57wHyRHtsEg4Dwn57/X7NT/0/d2/G/aWg9mg8QoMhQG8jd2wZMbiE0VQ0cmAAD3yYO+kqE/HwAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getL(()Lorg/apache/commons/math3/linear/RealMatrix;)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAAuElEQVR4nGNgGAXDD5Run/CftdHzv97UhP8gNlUM9V1c/D9+Vcn/LZfm/p9xbAKYDRKjyNDCbb3/w5YX/F99fiYSngEWA8mRbTBzg8f/pr1N/1v2tSDw/hawGEiObINle8L+J60Cum5jGRSXgmmQGEiObINT1rX+t58R/79jZ+P/jh2N/zuBGMS2n57wHyRHtsEg4Dwn57/X7NT/0/d2/G/aWg9mg8QoMhQG8jd2wZMbiE0VQ0cmAAD3yYO+kqE/HwAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getP(()Lorg/apache/commons/math3/linear/RealMatrix;)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAAuElEQVR4nGNgGAXDD5Run/CftdHzv97UhP8gNlUM9V1c/D9+Vcn/LZfm/p9xbAKYDRKjyNDCbb3/w5YX/F99fiYSngEWA8mRbTBzg8f/pr1N/1v2tSDw/hawGEiObINle8L+J60Cum5jGRSXgmmQGEiObINT1rX+t58R/79jZ+P/jh2N/zuBGMS2n57wHyRHtsEg4Dwn57/X7NT/0/d2/G/aWg9mg8QoMhQG8jd2wZMbiE0VQ0cmAAD3yYO+kqE/HwAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getPivot(()[I)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAAuElEQVR4nGNgGAXDD5Run/CftdHzv97UhP8gNlUM9V1c/D9+Vcn/LZfm/p9xbAKYDRKjyNDCbb3/w5YX/F99fiYSngEWA8mRbTBzg8f/pr1N/1v2tSDw/hawGEiObINle8L+J60Cum5jGRSXgmmQGEiObINT1rX+t58R/79jZ+P/jh2N/zuBGMS2n57wHyRHtsEg4Dwn57/X7NT/0/d2/G/aWg9mg8QoMhQG8jd2wZMbiE0VQ0cmAAD3yYO+kqE/HwAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getSolver(()Lorg/apache/commons/math3/linear/DecompositionSolver;)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAAuElEQVR4nGNgGAXDD5Run/CftdHzv97UhP8gNlUM9V1c/D9+Vcn/LZfm/p9xbAKYDRKjyNDCbb3/w5YX/F99fiYSngEWA8mRbTBzg8f/pr1N/1v2tSDw/hawGEiObINle8L+J60Cum5jGRSXgmmQGEiObINT1rX+t58R/79jZ+P/jh2N/zuBGMS2n57wHyRHtsEg4Dwn57/X7NT/0/d2/G/aWg9mg8QoMhQG8jd2wZMbiE0VQ0cmAAD3yYO+kqE/HwAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.LUDecomposition.getU(()Lorg/apache/commons/math3/linear/RealMatrix;)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAACIElEQVR4nKWS70tTcRTGpf+iF73rjZG2NIJ+cAuqKyniEKmMGncVWYvQ3jjTO9nSmlL+aIGZi7WGbIQ1zEtUKAscbLuoFOGLJS5SMEkQU9BePn3PV+7Fu6u18oGHe865hw/nnnvy8rI0MTuJi4FbKPNJOHTPitJuG8+pnt1LAtPPkSSSOwq4KSYZmjxvfBx2rb8WzmiDbsqL75SD3m8GJqAmLTZAi9wl8CguDH4awOj0ByS+xvkzmPTDrbixu14wwbPBmvTPp0lvR52ITQ2bmkgjX96j6XUjn3zjWv64ivP+OtiDNXiW7NNBw+m3eBh7AOXzIM9nlr7B++4u77scchrAG2VYhdhlQ2WPDYHEc16cXshAClzVfTNch5qQg7v6iR3Un9OO6fMszSK6YusTxzMqCl2nUCCf5Ka42HMaB1tLIbRVsLjMAP7eEdRXQbFh4iPeCnYBXl6cXZrDsfZKCF4rd0iNYuCjgvD4EPyJMPOLTU/PJNqZ0GaF7akDy79W1n9WehQ3Io1QS4Qt/Vdw+keGn1LVYzu7DA+m2I41qSeOYs3XaTLVc5q6WelGoSxC7DwLKXgd8lArIuMvoQqHOWhVlnVzMKvnBNbg+1wiu5BLONN3Bf1jr5CyHMBqvRvL5RewwkxPyqmeM5hEx1/V68Dx9nPojUeQyt+PxZYWzEsSs52b8lS+5d/A2Urt2ov5R/dNpvr2wDv3YCtvC/y/+g2c+1jdyUkwiAAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="type:org.apache.commons.math3.linear.LUDecomposition$Solver" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAAZUlEQVR4nGNgoBD8BwKNpGn/g+uXgDGIDQKUmgs2GGQgOqC6wRQbiGwwLChANFUNppmLYQYTpeGGk/9/dIzLYJJSAsigx+UNYA0gGpfBJAOQQciAqgbDXPy8YwJ1DSYmjEfBMAQA9rqpfFpakWAAAAAASUVORK5CYII=" height="16" modelElementIdentifier="field:org.apache.commons.math3.linear.LUDecomposition$Solver.lu" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAAZUlEQVR4nGNgoBD8BwKNpGn/g+uXgDGIDQKUmgs2GGQgOqC6wRQbiGwwLChANFUNppmLYQYTpeGGk/9/dIzLYJJSAsigx+UNYA0gGpfBJAOQQciAqgbDXPy8YwJ1DSYmjEfBMAQA9rqpfFpakWAAAAAASUVORK5CYII=" height="16" modelElementIdentifier="field:org.apache.commons.math3.linear.LUDecomposition$Solver.pivot" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAAZUlEQVR4nGNgoBD8BwKNpGn/g+uXgDGIDQKUmgs2GGQgOqC6wRQbiGwwLChANFUNppmLYQYTpeGGk/9/dIzLYJJSAsigx+UNYA0gGpfBJAOQQciAqgbDXPy8YwJ1DSYmjEfBMAQA9rqpfFpakWAAAAAASUVORK5CYII=" height="16" modelElementIdentifier="field:org.apache.commons.math3.linear.LUDecomposition$Solver.singular" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAApklEQVR4nGNgoBD8BwL99V7/FatM/ivVmf7f/fbof0rNBAOHbZFwA/sfLgCzqWowMhgaBlM9KEiKvJPudv9xYVyGExUMJ51t/n+b1IeBQeIUee+knRXYoK81NXAMNhgoTpHBJwxM/n8ta/j/0Tfm/ycgBtEgPkicMoM1Df+/bW7+/zwhAYgTwRjEP6FpQKHBsjr/n0/uxsAgccoMltT6jwtTZPDIBACqINxu0i7a5wAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.Solver(([[D[IZ)V)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAAqUlEQVR4nGNgoBD8BwL99V7/FatM/ivVmf7f/fbof0rNBAOHbZFwA/sfLgCzqWowMhgaBlM9KMiKPPWc5f/VspcTVEhSMCinL/kf1LbrfzAQK2UspY73QEAuZfF/y4oN/y3LN/yXS11MHYMlkxf8l0lZ+F8mdREQA+mURf9BYhQbLBo/779j+XoULJYwnzKDheLm/g9p3IYVg+TINlggZs5/fJgiV49MAABgILRel93u5gAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.Solver(([[D[IZLorg/apache/commons/math3/linear/LUDecomposition$1;)V)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAAuElEQVR4nGNgGAXDD5Run/CftdHzv97UhP8gNlUM9V1c/D9+Vcn/LZfm/p9xbAKYDRKjyNDCbb3/w5YX/F99fiYSngEWA8mRbTBzg8f/pr1N/1v2tSDw/hawGEiObINle8L+J60Cum5jGRSXgmmQGEiObINT1rX+t58R/79jZ+P/jh2N/zuBGMS2n57wHyRHtsEg4Dwn57/X7NT/0/d2/G/aWg9mg8QoMhQG8jd2wZMbiE0VQ0cmAAD3yYO+kqE/HwAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.getInverse(()Lorg/apache/commons/math3/linear/RealMatrix;)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAAuElEQVR4nGNgGAXDD5Run/CftdHzv97UhP8gNlUM9V1c/D9+Vcn/LZfm/p9xbAKYDRKjyNDCbb3/w5YX/F99fiYSngEWA8mRbTBzg8f/pr1N/1v2tSDw/hawGEiObINle8L+J60Cum5jGRSXgmmQGEiObINT1rX+t58R/79jZ+P/jh2N/zuBGMS2n57wHyRHtsEg4Dwn57/X7NT/0/d2/G/aWg9mg8QoMhQG8jd2wZMbiE0VQ0cmAAD3yYO+kqE/HwAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.isNonSingular(()Z)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAAuElEQVR4nGNgGAXDD5Run/CftdHzv97UhP8gNlUM9V1c/D9+Vcn/LZfm/p9xbAKYDRKjyNDCbb3/w5YX/F99fiYSngEWA8mRbTBzg8f/pr1N/1v2tSDw/hawGEiObINle8L+J60Cum5jGRSXgmmQGEiObINT1rX+t58R/79jZ+P/jh2N/zuBGMS2n57wHyRHtsEg4Dwn57/X7NT/0/d2/G/aWg9mg8QoMhQG8jd2wZMbiE0VQ0cmAAD3yYO+kqE/HwAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.solve((Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/RealVector;)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAAuElEQVR4nGNgGAXDD5Run/CftdHzv97UhP8gNlUM9V1c/D9+Vcn/LZfm/p9xbAKYDRKjyNDCbb3/w5YX/F99fiYSngEWA8mRbTBzg8f/pr1N/1v2tSDw/hawGEiObINle8L+J60Cum5jGRSXgmmQGEiObINT1rX+t58R/79jZ+P/jh2N/zuBGMS2n57wHyRHtsEg4Dwn57/X7NT/0/d2/G/aWg9mg8QoMhQG8jd2wZMbiE0VQ0cmAAD3yYO+kqE/HwAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.LUDecomposition$Solver.solve((Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;)" width="22"/>
</AgileJWebModel>
