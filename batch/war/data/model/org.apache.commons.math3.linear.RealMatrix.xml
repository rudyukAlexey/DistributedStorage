<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<AgileJWebModel version="1.8.3.v20151019-2113">
    <type deep="true" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" fileNameKey="org.apache.commons.math3.linear.RealMatrix.xml" formalDisplayName="RealMatrix" isBinary="true" isClass="false" isDeprecated="false" isEnum="false" isInterface="true" isPrimitive="false" isTopLevel="true" javaProjectName="DistributedStorage" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix">
        <filters>
            <filter signature="all interfaces"/>
            <filter signature="all types"/>
            <filter signature="bytecode types"/>
            <filter signature="inner types named {type-name}" switchValues="RealMatrix"/>
            <filter signature="members of package {package-name}" switchValues="org.apache.commons.math3.linear"/>
            <filter signature="non java star package types"/>
            <filter signature="public types"/>
            <filter signature="top level types"/>
            <filter signature="types named {type-name-pattern}" switchValues="RealMatrix"/>
        </filters>
        <outermostType>
            <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
        </outermostType>
        <method deep="true" elementName="createMatrix" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.createMatrix((II)Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="methods named {method-name-pattern}" switchValues="createMatrix"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <exceptions>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.NotStrictlyPositiveException" elementName="NotStrictlyPositiveException" formalDisplayName="NotStrictlyPositiveException" modelMemberIdentifier="type:org.apache.commons.math3.exception.NotStrictlyPositiveException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.NotStrictlyPositiveException"/>
            </exceptions>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg1">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="copy" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.copy(()Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="methods named {method-name-pattern}" switchValues="copy"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </containedType>
                </typeReference>
            </return>
            <calledMethods/>
        </method>
        <method deep="true" elementName="add" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.add((Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="methods named {method-name-pattern}" switchValues="add"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overloaded methods"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <exceptions>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.MatrixDimensionMismatchException" elementName="MatrixDimensionMismatchException" formalDisplayName="MatrixDimensionMismatchException" modelMemberIdentifier="type:org.apache.commons.math3.linear.MatrixDimensionMismatchException" modifiers="public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.MatrixDimensionMismatchException"/>
            </exceptions>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="subtract" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.subtract((Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="methods named {method-name-pattern}" switchValues="subtract"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overloaded methods"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <exceptions>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.MatrixDimensionMismatchException" elementName="MatrixDimensionMismatchException" formalDisplayName="MatrixDimensionMismatchException" modelMemberIdentifier="type:org.apache.commons.math3.linear.MatrixDimensionMismatchException" modifiers="public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.MatrixDimensionMismatchException"/>
            </exceptions>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="scalarAdd" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.scalarAdd((D)Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="methods named {method-name-pattern}" switchValues="scalarAdd"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="scalarMultiply" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.scalarMultiply((D)Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="methods named {method-name-pattern}" switchValues="scalarMultiply"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="multiply" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.multiply((Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="methods named {method-name-pattern}" switchValues="multiply"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overloaded methods"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <exceptions>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.DimensionMismatchException" elementName="DimensionMismatchException" formalDisplayName="DimensionMismatchException" modelMemberIdentifier="type:org.apache.commons.math3.exception.DimensionMismatchException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.DimensionMismatchException"/>
            </exceptions>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="preMultiply" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.preMultiply((Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="methods named {method-name-pattern}" switchValues="preMultiply"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overloaded methods"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <exceptions>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.DimensionMismatchException" elementName="DimensionMismatchException" formalDisplayName="DimensionMismatchException" modelMemberIdentifier="type:org.apache.commons.math3.exception.DimensionMismatchException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.DimensionMismatchException"/>
            </exceptions>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="power" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.power((I)Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="methods named {method-name-pattern}" switchValues="power"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <exceptions>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.NotPositiveException" elementName="NotPositiveException" formalDisplayName="NotPositiveException" modelMemberIdentifier="type:org.apache.commons.math3.exception.NotPositiveException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.NotPositiveException"/>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.NonSquareMatrixException" elementName="NonSquareMatrixException" formalDisplayName="NonSquareMatrixException" modelMemberIdentifier="type:org.apache.commons.math3.linear.NonSquareMatrixException" modifiers="public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.NonSquareMatrixException"/>
            </exceptions>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="getData" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.getData(()[[D)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="getter methods"/>
                <filter signature="methods named {method-name-pattern}" switchValues="getData"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <return>
                <typeReference arrayDimensions="2" many="true">
                    <rawType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </containedType>
                </typeReference>
            </return>
            <calledMethods/>
        </method>
        <method deep="true" elementName="getNorm" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.getNorm(()D)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="getter methods"/>
                <filter signature="methods named {method-name-pattern}" switchValues="getNorm"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </containedType>
                </typeReference>
            </return>
            <calledMethods/>
        </method>
        <method deep="true" elementName="getFrobeniusNorm" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.getFrobeniusNorm(()D)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="getter methods"/>
                <filter signature="methods named {method-name-pattern}" switchValues="getFrobeniusNorm"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </containedType>
                </typeReference>
            </return>
            <calledMethods/>
        </method>
        <method deep="true" elementName="getSubMatrix" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.getSubMatrix((IIII)Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="getter methods"/>
                <filter signature="methods named {method-name-pattern}" switchValues="getSubMatrix"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overloaded methods"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <exceptions>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.OutOfRangeException" elementName="OutOfRangeException" formalDisplayName="OutOfRangeException" modelMemberIdentifier="type:org.apache.commons.math3.exception.OutOfRangeException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.OutOfRangeException"/>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.NumberIsTooSmallException" elementName="NumberIsTooSmallException" formalDisplayName="NumberIsTooSmallException" modelMemberIdentifier="type:org.apache.commons.math3.exception.NumberIsTooSmallException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
            </exceptions>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg1">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg2">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg3">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="getSubMatrix" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.getSubMatrix(([I[I)Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="getter methods"/>
                <filter signature="methods named {method-name-pattern}" switchValues="getSubMatrix"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overloaded methods"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <exceptions>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.NullArgumentException" elementName="NullArgumentException" formalDisplayName="NullArgumentException" modelMemberIdentifier="type:org.apache.commons.math3.exception.NullArgumentException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.NullArgumentException"/>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.NoDataException" elementName="NoDataException" formalDisplayName="NoDataException" modelMemberIdentifier="type:org.apache.commons.math3.exception.NoDataException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.NoDataException"/>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.OutOfRangeException" elementName="OutOfRangeException" formalDisplayName="OutOfRangeException" modelMemberIdentifier="type:org.apache.commons.math3.exception.OutOfRangeException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.OutOfRangeException"/>
            </exceptions>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="1" many="true">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg1">
                <typeReference arrayDimensions="1" many="true">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="copySubMatrix" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.copySubMatrix((IIII[[D)V)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="methods named {method-name-pattern}" switchValues="copySubMatrix"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overloaded methods"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <exceptions>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.OutOfRangeException" elementName="OutOfRangeException" formalDisplayName="OutOfRangeException" modelMemberIdentifier="type:org.apache.commons.math3.exception.OutOfRangeException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.OutOfRangeException"/>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.NumberIsTooSmallException" elementName="NumberIsTooSmallException" formalDisplayName="NumberIsTooSmallException" modelMemberIdentifier="type:org.apache.commons.math3.exception.NumberIsTooSmallException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.MatrixDimensionMismatchException" elementName="MatrixDimensionMismatchException" formalDisplayName="MatrixDimensionMismatchException" modelMemberIdentifier="type:org.apache.commons.math3.linear.MatrixDimensionMismatchException" modifiers="public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.MatrixDimensionMismatchException"/>
            </exceptions>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="void" elementName="void" formalDisplayName="void" modelMemberIdentifier="type:void" modifiers="" packageName="" qualifiedName="void"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="void" elementName="void" formalDisplayName="void" modelMemberIdentifier="type:void" modifiers="" packageName="" qualifiedName="void"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg1">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg2">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg3">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg4">
                <typeReference arrayDimensions="2" many="true">
                    <rawType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="copySubMatrix" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.copySubMatrix(([I[I[[D)V)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="methods named {method-name-pattern}" switchValues="copySubMatrix"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overloaded methods"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <exceptions>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.OutOfRangeException" elementName="OutOfRangeException" formalDisplayName="OutOfRangeException" modelMemberIdentifier="type:org.apache.commons.math3.exception.OutOfRangeException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.OutOfRangeException"/>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.NullArgumentException" elementName="NullArgumentException" formalDisplayName="NullArgumentException" modelMemberIdentifier="type:org.apache.commons.math3.exception.NullArgumentException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.NullArgumentException"/>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.NoDataException" elementName="NoDataException" formalDisplayName="NoDataException" modelMemberIdentifier="type:org.apache.commons.math3.exception.NoDataException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.NoDataException"/>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.MatrixDimensionMismatchException" elementName="MatrixDimensionMismatchException" formalDisplayName="MatrixDimensionMismatchException" modelMemberIdentifier="type:org.apache.commons.math3.linear.MatrixDimensionMismatchException" modifiers="public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.MatrixDimensionMismatchException"/>
            </exceptions>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="void" elementName="void" formalDisplayName="void" modelMemberIdentifier="type:void" modifiers="" packageName="" qualifiedName="void"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="void" elementName="void" formalDisplayName="void" modelMemberIdentifier="type:void" modifiers="" packageName="" qualifiedName="void"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="1" many="true">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg1">
                <typeReference arrayDimensions="1" many="true">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg2">
                <typeReference arrayDimensions="2" many="true">
                    <rawType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="setSubMatrix" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.setSubMatrix(([[DII)V)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="methods named {method-name-pattern}" switchValues="setSubMatrix"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
                <filter signature="setter methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <exceptions>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.NoDataException" elementName="NoDataException" formalDisplayName="NoDataException" modelMemberIdentifier="type:org.apache.commons.math3.exception.NoDataException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.NoDataException"/>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.OutOfRangeException" elementName="OutOfRangeException" formalDisplayName="OutOfRangeException" modelMemberIdentifier="type:org.apache.commons.math3.exception.OutOfRangeException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.OutOfRangeException"/>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.DimensionMismatchException" elementName="DimensionMismatchException" formalDisplayName="DimensionMismatchException" modelMemberIdentifier="type:org.apache.commons.math3.exception.DimensionMismatchException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.DimensionMismatchException"/>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.NullArgumentException" elementName="NullArgumentException" formalDisplayName="NullArgumentException" modelMemberIdentifier="type:org.apache.commons.math3.exception.NullArgumentException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.NullArgumentException"/>
            </exceptions>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="void" elementName="void" formalDisplayName="void" modelMemberIdentifier="type:void" modifiers="" packageName="" qualifiedName="void"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="void" elementName="void" formalDisplayName="void" modelMemberIdentifier="type:void" modifiers="" packageName="" qualifiedName="void"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="2" many="true">
                    <rawType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg1">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg2">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="getRowMatrix" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.getRowMatrix((I)Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="getter methods"/>
                <filter signature="methods named {method-name-pattern}" switchValues="getRowMatrix"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <exceptions>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.OutOfRangeException" elementName="OutOfRangeException" formalDisplayName="OutOfRangeException" modelMemberIdentifier="type:org.apache.commons.math3.exception.OutOfRangeException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.OutOfRangeException"/>
            </exceptions>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="setRowMatrix" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.setRowMatrix((ILorg/apache/commons/math3/linear/RealMatrix;)V)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="methods named {method-name-pattern}" switchValues="setRowMatrix"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overloaded methods"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
                <filter signature="setter methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <exceptions>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.OutOfRangeException" elementName="OutOfRangeException" formalDisplayName="OutOfRangeException" modelMemberIdentifier="type:org.apache.commons.math3.exception.OutOfRangeException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.OutOfRangeException"/>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.MatrixDimensionMismatchException" elementName="MatrixDimensionMismatchException" formalDisplayName="MatrixDimensionMismatchException" modelMemberIdentifier="type:org.apache.commons.math3.linear.MatrixDimensionMismatchException" modifiers="public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.MatrixDimensionMismatchException"/>
            </exceptions>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="void" elementName="void" formalDisplayName="void" modelMemberIdentifier="type:void" modifiers="" packageName="" qualifiedName="void"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="void" elementName="void" formalDisplayName="void" modelMemberIdentifier="type:void" modifiers="" packageName="" qualifiedName="void"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg1">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="getColumnMatrix" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.getColumnMatrix((I)Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="getter methods"/>
                <filter signature="methods named {method-name-pattern}" switchValues="getColumnMatrix"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <exceptions>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.OutOfRangeException" elementName="OutOfRangeException" formalDisplayName="OutOfRangeException" modelMemberIdentifier="type:org.apache.commons.math3.exception.OutOfRangeException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.OutOfRangeException"/>
            </exceptions>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="setColumnMatrix" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.setColumnMatrix((ILorg/apache/commons/math3/linear/RealMatrix;)V)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="methods named {method-name-pattern}" switchValues="setColumnMatrix"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overloaded methods"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
                <filter signature="setter methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <exceptions>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.OutOfRangeException" elementName="OutOfRangeException" formalDisplayName="OutOfRangeException" modelMemberIdentifier="type:org.apache.commons.math3.exception.OutOfRangeException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.OutOfRangeException"/>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.MatrixDimensionMismatchException" elementName="MatrixDimensionMismatchException" formalDisplayName="MatrixDimensionMismatchException" modelMemberIdentifier="type:org.apache.commons.math3.linear.MatrixDimensionMismatchException" modifiers="public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.MatrixDimensionMismatchException"/>
            </exceptions>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="void" elementName="void" formalDisplayName="void" modelMemberIdentifier="type:void" modifiers="" packageName="" qualifiedName="void"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="void" elementName="void" formalDisplayName="void" modelMemberIdentifier="type:void" modifiers="" packageName="" qualifiedName="void"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg1">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="getRowVector" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.getRowVector((I)Lorg/apache/commons/math3/linear/RealVector;)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="getter methods"/>
                <filter signature="methods named {method-name-pattern}" switchValues="getRowVector"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <exceptions>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.OutOfRangeException" elementName="OutOfRangeException" formalDisplayName="OutOfRangeException" modelMemberIdentifier="type:org.apache.commons.math3.exception.OutOfRangeException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.OutOfRangeException"/>
            </exceptions>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="setRowVector" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.setRowVector((ILorg/apache/commons/math3/linear/RealVector;)V)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="methods named {method-name-pattern}" switchValues="setRowVector"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
                <filter signature="setter methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <exceptions>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.OutOfRangeException" elementName="OutOfRangeException" formalDisplayName="OutOfRangeException" modelMemberIdentifier="type:org.apache.commons.math3.exception.OutOfRangeException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.OutOfRangeException"/>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.MatrixDimensionMismatchException" elementName="MatrixDimensionMismatchException" formalDisplayName="MatrixDimensionMismatchException" modelMemberIdentifier="type:org.apache.commons.math3.linear.MatrixDimensionMismatchException" modifiers="public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.MatrixDimensionMismatchException"/>
            </exceptions>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="void" elementName="void" formalDisplayName="void" modelMemberIdentifier="type:void" modifiers="" packageName="" qualifiedName="void"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="void" elementName="void" formalDisplayName="void" modelMemberIdentifier="type:void" modifiers="" packageName="" qualifiedName="void"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg1">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="getColumnVector" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.getColumnVector((I)Lorg/apache/commons/math3/linear/RealVector;)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="getter methods"/>
                <filter signature="methods named {method-name-pattern}" switchValues="getColumnVector"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <exceptions>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.OutOfRangeException" elementName="OutOfRangeException" formalDisplayName="OutOfRangeException" modelMemberIdentifier="type:org.apache.commons.math3.exception.OutOfRangeException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.OutOfRangeException"/>
            </exceptions>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="setColumnVector" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.setColumnVector((ILorg/apache/commons/math3/linear/RealVector;)V)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="methods named {method-name-pattern}" switchValues="setColumnVector"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
                <filter signature="setter methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <exceptions>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.OutOfRangeException" elementName="OutOfRangeException" formalDisplayName="OutOfRangeException" modelMemberIdentifier="type:org.apache.commons.math3.exception.OutOfRangeException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.OutOfRangeException"/>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.MatrixDimensionMismatchException" elementName="MatrixDimensionMismatchException" formalDisplayName="MatrixDimensionMismatchException" modelMemberIdentifier="type:org.apache.commons.math3.linear.MatrixDimensionMismatchException" modifiers="public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.MatrixDimensionMismatchException"/>
            </exceptions>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="void" elementName="void" formalDisplayName="void" modelMemberIdentifier="type:void" modifiers="" packageName="" qualifiedName="void"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="void" elementName="void" formalDisplayName="void" modelMemberIdentifier="type:void" modifiers="" packageName="" qualifiedName="void"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg1">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="getRow" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.getRow((I)[D)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="getter methods"/>
                <filter signature="methods named {method-name-pattern}" switchValues="getRow"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <exceptions>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.OutOfRangeException" elementName="OutOfRangeException" formalDisplayName="OutOfRangeException" modelMemberIdentifier="type:org.apache.commons.math3.exception.OutOfRangeException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.OutOfRangeException"/>
            </exceptions>
            <return>
                <typeReference arrayDimensions="1" many="true">
                    <rawType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="setRow" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.setRow((I[D)V)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="methods named {method-name-pattern}" switchValues="setRow"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
                <filter signature="setter methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <exceptions>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.OutOfRangeException" elementName="OutOfRangeException" formalDisplayName="OutOfRangeException" modelMemberIdentifier="type:org.apache.commons.math3.exception.OutOfRangeException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.OutOfRangeException"/>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.MatrixDimensionMismatchException" elementName="MatrixDimensionMismatchException" formalDisplayName="MatrixDimensionMismatchException" modelMemberIdentifier="type:org.apache.commons.math3.linear.MatrixDimensionMismatchException" modifiers="public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.MatrixDimensionMismatchException"/>
            </exceptions>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="void" elementName="void" formalDisplayName="void" modelMemberIdentifier="type:void" modifiers="" packageName="" qualifiedName="void"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="void" elementName="void" formalDisplayName="void" modelMemberIdentifier="type:void" modifiers="" packageName="" qualifiedName="void"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg1">
                <typeReference arrayDimensions="1" many="true">
                    <rawType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="getColumn" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.getColumn((I)[D)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="getter methods"/>
                <filter signature="methods named {method-name-pattern}" switchValues="getColumn"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <exceptions>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.OutOfRangeException" elementName="OutOfRangeException" formalDisplayName="OutOfRangeException" modelMemberIdentifier="type:org.apache.commons.math3.exception.OutOfRangeException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.OutOfRangeException"/>
            </exceptions>
            <return>
                <typeReference arrayDimensions="1" many="true">
                    <rawType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="setColumn" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.setColumn((I[D)V)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="methods named {method-name-pattern}" switchValues="setColumn"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
                <filter signature="setter methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <exceptions>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.OutOfRangeException" elementName="OutOfRangeException" formalDisplayName="OutOfRangeException" modelMemberIdentifier="type:org.apache.commons.math3.exception.OutOfRangeException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.OutOfRangeException"/>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.MatrixDimensionMismatchException" elementName="MatrixDimensionMismatchException" formalDisplayName="MatrixDimensionMismatchException" modelMemberIdentifier="type:org.apache.commons.math3.linear.MatrixDimensionMismatchException" modifiers="public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.MatrixDimensionMismatchException"/>
            </exceptions>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="void" elementName="void" formalDisplayName="void" modelMemberIdentifier="type:void" modifiers="" packageName="" qualifiedName="void"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="void" elementName="void" formalDisplayName="void" modelMemberIdentifier="type:void" modifiers="" packageName="" qualifiedName="void"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg1">
                <typeReference arrayDimensions="1" many="true">
                    <rawType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="getEntry" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.getEntry((II)D)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="getter methods"/>
                <filter signature="methods named {method-name-pattern}" switchValues="getEntry"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <exceptions>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.OutOfRangeException" elementName="OutOfRangeException" formalDisplayName="OutOfRangeException" modelMemberIdentifier="type:org.apache.commons.math3.exception.OutOfRangeException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.OutOfRangeException"/>
            </exceptions>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg1">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="setEntry" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.setEntry((IID)V)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="methods named {method-name-pattern}" switchValues="setEntry"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
                <filter signature="setter methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <exceptions>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.OutOfRangeException" elementName="OutOfRangeException" formalDisplayName="OutOfRangeException" modelMemberIdentifier="type:org.apache.commons.math3.exception.OutOfRangeException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.OutOfRangeException"/>
            </exceptions>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="void" elementName="void" formalDisplayName="void" modelMemberIdentifier="type:void" modifiers="" packageName="" qualifiedName="void"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="void" elementName="void" formalDisplayName="void" modelMemberIdentifier="type:void" modifiers="" packageName="" qualifiedName="void"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg1">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg2">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="addToEntry" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.addToEntry((IID)V)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="methods named {method-name-pattern}" switchValues="addToEntry"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <exceptions>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.OutOfRangeException" elementName="OutOfRangeException" formalDisplayName="OutOfRangeException" modelMemberIdentifier="type:org.apache.commons.math3.exception.OutOfRangeException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.OutOfRangeException"/>
            </exceptions>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="void" elementName="void" formalDisplayName="void" modelMemberIdentifier="type:void" modifiers="" packageName="" qualifiedName="void"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="void" elementName="void" formalDisplayName="void" modelMemberIdentifier="type:void" modifiers="" packageName="" qualifiedName="void"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg1">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg2">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="multiplyEntry" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.multiplyEntry((IID)V)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="methods named {method-name-pattern}" switchValues="multiplyEntry"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <exceptions>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.OutOfRangeException" elementName="OutOfRangeException" formalDisplayName="OutOfRangeException" modelMemberIdentifier="type:org.apache.commons.math3.exception.OutOfRangeException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.OutOfRangeException"/>
            </exceptions>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="void" elementName="void" formalDisplayName="void" modelMemberIdentifier="type:void" modifiers="" packageName="" qualifiedName="void"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="void" elementName="void" formalDisplayName="void" modelMemberIdentifier="type:void" modifiers="" packageName="" qualifiedName="void"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg1">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg2">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="transpose" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.transpose(()Lorg/apache/commons/math3/linear/RealMatrix;)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="methods named {method-name-pattern}" switchValues="transpose"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
                    </containedType>
                </typeReference>
            </return>
            <calledMethods/>
        </method>
        <method deep="true" elementName="getTrace" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.getTrace(()D)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="getter methods"/>
                <filter signature="methods named {method-name-pattern}" switchValues="getTrace"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <exceptions>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.NonSquareMatrixException" elementName="NonSquareMatrixException" formalDisplayName="NonSquareMatrixException" modelMemberIdentifier="type:org.apache.commons.math3.linear.NonSquareMatrixException" modifiers="public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.NonSquareMatrixException"/>
            </exceptions>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </containedType>
                </typeReference>
            </return>
            <calledMethods/>
        </method>
        <method deep="true" elementName="operate" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.operate(([D)[D)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="methods named {method-name-pattern}" switchValues="operate"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overloaded methods"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <exceptions>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.DimensionMismatchException" elementName="DimensionMismatchException" formalDisplayName="DimensionMismatchException" modelMemberIdentifier="type:org.apache.commons.math3.exception.DimensionMismatchException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.DimensionMismatchException"/>
            </exceptions>
            <return>
                <typeReference arrayDimensions="1" many="true">
                    <rawType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="1" many="true">
                    <rawType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="operate" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.operate((Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/RealVector;)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="methods named {method-name-pattern}" switchValues="operate"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overloaded methods"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <exceptions>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.DimensionMismatchException" elementName="DimensionMismatchException" formalDisplayName="DimensionMismatchException" modelMemberIdentifier="type:org.apache.commons.math3.exception.DimensionMismatchException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.DimensionMismatchException"/>
            </exceptions>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="preMultiply" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.preMultiply(([D)[D)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="methods named {method-name-pattern}" switchValues="preMultiply"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overloaded methods"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <exceptions>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.DimensionMismatchException" elementName="DimensionMismatchException" formalDisplayName="DimensionMismatchException" modelMemberIdentifier="type:org.apache.commons.math3.exception.DimensionMismatchException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.DimensionMismatchException"/>
            </exceptions>
            <return>
                <typeReference arrayDimensions="1" many="true">
                    <rawType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="1" many="true">
                    <rawType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="preMultiply" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.preMultiply((Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/RealVector;)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="methods named {method-name-pattern}" switchValues="preMultiply"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overloaded methods"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <exceptions>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.DimensionMismatchException" elementName="DimensionMismatchException" formalDisplayName="DimensionMismatchException" modelMemberIdentifier="type:org.apache.commons.math3.exception.DimensionMismatchException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.DimensionMismatchException"/>
            </exceptions>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealVector" elementName="RealVector" formalDisplayName="RealVector" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealVector" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealVector"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="walkInRowOrder" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.walkInRowOrder((Lorg/apache/commons/math3/linear/RealMatrixChangingVisitor;)D)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="methods named {method-name-pattern}" switchValues="walkInRowOrder"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overloaded methods"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrixChangingVisitor" elementName="RealMatrixChangingVisitor" formalDisplayName="RealMatrixChangingVisitor" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrixChangingVisitor" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrixChangingVisitor"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrixChangingVisitor" elementName="RealMatrixChangingVisitor" formalDisplayName="RealMatrixChangingVisitor" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrixChangingVisitor" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrixChangingVisitor"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="walkInRowOrder" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.walkInRowOrder((Lorg/apache/commons/math3/linear/RealMatrixPreservingVisitor;)D)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="methods named {method-name-pattern}" switchValues="walkInRowOrder"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overloaded methods"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrixPreservingVisitor" elementName="RealMatrixPreservingVisitor" formalDisplayName="RealMatrixPreservingVisitor" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrixPreservingVisitor" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrixPreservingVisitor"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrixPreservingVisitor" elementName="RealMatrixPreservingVisitor" formalDisplayName="RealMatrixPreservingVisitor" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrixPreservingVisitor" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrixPreservingVisitor"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="walkInRowOrder" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.walkInRowOrder((Lorg/apache/commons/math3/linear/RealMatrixChangingVisitor;IIII)D)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="methods named {method-name-pattern}" switchValues="walkInRowOrder"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overloaded methods"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <exceptions>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.OutOfRangeException" elementName="OutOfRangeException" formalDisplayName="OutOfRangeException" modelMemberIdentifier="type:org.apache.commons.math3.exception.OutOfRangeException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.OutOfRangeException"/>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.NumberIsTooSmallException" elementName="NumberIsTooSmallException" formalDisplayName="NumberIsTooSmallException" modelMemberIdentifier="type:org.apache.commons.math3.exception.NumberIsTooSmallException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
            </exceptions>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrixChangingVisitor" elementName="RealMatrixChangingVisitor" formalDisplayName="RealMatrixChangingVisitor" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrixChangingVisitor" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrixChangingVisitor"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrixChangingVisitor" elementName="RealMatrixChangingVisitor" formalDisplayName="RealMatrixChangingVisitor" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrixChangingVisitor" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrixChangingVisitor"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg1">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg2">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg3">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg4">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="walkInRowOrder" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.walkInRowOrder((Lorg/apache/commons/math3/linear/RealMatrixPreservingVisitor;IIII)D)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="methods named {method-name-pattern}" switchValues="walkInRowOrder"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overloaded methods"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <exceptions>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.OutOfRangeException" elementName="OutOfRangeException" formalDisplayName="OutOfRangeException" modelMemberIdentifier="type:org.apache.commons.math3.exception.OutOfRangeException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.OutOfRangeException"/>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.NumberIsTooSmallException" elementName="NumberIsTooSmallException" formalDisplayName="NumberIsTooSmallException" modelMemberIdentifier="type:org.apache.commons.math3.exception.NumberIsTooSmallException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
            </exceptions>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrixPreservingVisitor" elementName="RealMatrixPreservingVisitor" formalDisplayName="RealMatrixPreservingVisitor" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrixPreservingVisitor" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrixPreservingVisitor"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrixPreservingVisitor" elementName="RealMatrixPreservingVisitor" formalDisplayName="RealMatrixPreservingVisitor" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrixPreservingVisitor" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrixPreservingVisitor"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg1">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg2">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg3">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg4">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="walkInColumnOrder" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.walkInColumnOrder((Lorg/apache/commons/math3/linear/RealMatrixChangingVisitor;)D)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="methods named {method-name-pattern}" switchValues="walkInColumnOrder"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overloaded methods"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrixChangingVisitor" elementName="RealMatrixChangingVisitor" formalDisplayName="RealMatrixChangingVisitor" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrixChangingVisitor" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrixChangingVisitor"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrixChangingVisitor" elementName="RealMatrixChangingVisitor" formalDisplayName="RealMatrixChangingVisitor" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrixChangingVisitor" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrixChangingVisitor"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="walkInColumnOrder" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.walkInColumnOrder((Lorg/apache/commons/math3/linear/RealMatrixPreservingVisitor;)D)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="methods named {method-name-pattern}" switchValues="walkInColumnOrder"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overloaded methods"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrixPreservingVisitor" elementName="RealMatrixPreservingVisitor" formalDisplayName="RealMatrixPreservingVisitor" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrixPreservingVisitor" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrixPreservingVisitor"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrixPreservingVisitor" elementName="RealMatrixPreservingVisitor" formalDisplayName="RealMatrixPreservingVisitor" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrixPreservingVisitor" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrixPreservingVisitor"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="walkInColumnOrder" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.walkInColumnOrder((Lorg/apache/commons/math3/linear/RealMatrixChangingVisitor;IIII)D)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="methods named {method-name-pattern}" switchValues="walkInColumnOrder"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overloaded methods"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <exceptions>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.OutOfRangeException" elementName="OutOfRangeException" formalDisplayName="OutOfRangeException" modelMemberIdentifier="type:org.apache.commons.math3.exception.OutOfRangeException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.OutOfRangeException"/>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.NumberIsTooSmallException" elementName="NumberIsTooSmallException" formalDisplayName="NumberIsTooSmallException" modelMemberIdentifier="type:org.apache.commons.math3.exception.NumberIsTooSmallException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
            </exceptions>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrixChangingVisitor" elementName="RealMatrixChangingVisitor" formalDisplayName="RealMatrixChangingVisitor" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrixChangingVisitor" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrixChangingVisitor"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrixChangingVisitor" elementName="RealMatrixChangingVisitor" formalDisplayName="RealMatrixChangingVisitor" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrixChangingVisitor" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrixChangingVisitor"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg1">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg2">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg3">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg4">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="walkInColumnOrder" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.walkInColumnOrder((Lorg/apache/commons/math3/linear/RealMatrixPreservingVisitor;IIII)D)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="methods named {method-name-pattern}" switchValues="walkInColumnOrder"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overloaded methods"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <exceptions>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.OutOfRangeException" elementName="OutOfRangeException" formalDisplayName="OutOfRangeException" modelMemberIdentifier="type:org.apache.commons.math3.exception.OutOfRangeException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.OutOfRangeException"/>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.NumberIsTooSmallException" elementName="NumberIsTooSmallException" formalDisplayName="NumberIsTooSmallException" modelMemberIdentifier="type:org.apache.commons.math3.exception.NumberIsTooSmallException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
            </exceptions>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrixPreservingVisitor" elementName="RealMatrixPreservingVisitor" formalDisplayName="RealMatrixPreservingVisitor" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrixPreservingVisitor" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrixPreservingVisitor"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrixPreservingVisitor" elementName="RealMatrixPreservingVisitor" formalDisplayName="RealMatrixPreservingVisitor" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrixPreservingVisitor" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrixPreservingVisitor"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg1">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg2">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg3">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg4">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="walkInOptimizedOrder" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.walkInOptimizedOrder((Lorg/apache/commons/math3/linear/RealMatrixChangingVisitor;)D)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="methods named {method-name-pattern}" switchValues="walkInOptimizedOrder"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overloaded methods"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrixChangingVisitor" elementName="RealMatrixChangingVisitor" formalDisplayName="RealMatrixChangingVisitor" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrixChangingVisitor" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrixChangingVisitor"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrixChangingVisitor" elementName="RealMatrixChangingVisitor" formalDisplayName="RealMatrixChangingVisitor" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrixChangingVisitor" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrixChangingVisitor"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="walkInOptimizedOrder" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.walkInOptimizedOrder((Lorg/apache/commons/math3/linear/RealMatrixPreservingVisitor;)D)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="methods named {method-name-pattern}" switchValues="walkInOptimizedOrder"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overloaded methods"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrixPreservingVisitor" elementName="RealMatrixPreservingVisitor" formalDisplayName="RealMatrixPreservingVisitor" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrixPreservingVisitor" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrixPreservingVisitor"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrixPreservingVisitor" elementName="RealMatrixPreservingVisitor" formalDisplayName="RealMatrixPreservingVisitor" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrixPreservingVisitor" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrixPreservingVisitor"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="walkInOptimizedOrder" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.walkInOptimizedOrder((Lorg/apache/commons/math3/linear/RealMatrixChangingVisitor;IIII)D)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="methods named {method-name-pattern}" switchValues="walkInOptimizedOrder"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overloaded methods"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <exceptions>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.OutOfRangeException" elementName="OutOfRangeException" formalDisplayName="OutOfRangeException" modelMemberIdentifier="type:org.apache.commons.math3.exception.OutOfRangeException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.OutOfRangeException"/>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.NumberIsTooSmallException" elementName="NumberIsTooSmallException" formalDisplayName="NumberIsTooSmallException" modelMemberIdentifier="type:org.apache.commons.math3.exception.NumberIsTooSmallException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
            </exceptions>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrixChangingVisitor" elementName="RealMatrixChangingVisitor" formalDisplayName="RealMatrixChangingVisitor" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrixChangingVisitor" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrixChangingVisitor"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrixChangingVisitor" elementName="RealMatrixChangingVisitor" formalDisplayName="RealMatrixChangingVisitor" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrixChangingVisitor" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrixChangingVisitor"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg1">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg2">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg3">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg4">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <method deep="true" elementName="walkInOptimizedOrder" isBinary="true" isDeprecated="false" modelMemberIdentifier="method:org.apache.commons.math3.linear.RealMatrix.walkInOptimizedOrder((Lorg/apache/commons/math3/linear/RealMatrixPreservingVisitor;IIII)D)" modifiers="abstract,public,">
            <filters>
                <filter signature="all methods"/>
                <filter signature="all operations"/>
                <filter signature="methods named {method-name-pattern}" switchValues="walkInOptimizedOrder"/>
                <filter signature="methods of {method-owner}" switchValues="RealMatrix"/>
                <filter signature="overloaded methods"/>
                <filter signature="overridden methods"/>
                <filter signature="public methods"/>
            </filters>
            <declarer>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrix" elementName="RealMatrix" formalDisplayName="RealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrix"/>
            </declarer>
            <exceptions>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.OutOfRangeException" elementName="OutOfRangeException" formalDisplayName="OutOfRangeException" modelMemberIdentifier="type:org.apache.commons.math3.exception.OutOfRangeException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.OutOfRangeException"/>
                <type deep="false" displayTextTemplate="org.apache.commons.math3.exception.NumberIsTooSmallException" elementName="NumberIsTooSmallException" formalDisplayName="NumberIsTooSmallException" modelMemberIdentifier="type:org.apache.commons.math3.exception.NumberIsTooSmallException" modifiers="public," packageName="org.apache.commons.math3.exception" qualifiedName="org.apache.commons.math3.exception.NumberIsTooSmallException"/>
            </exceptions>
            <return>
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="double" elementName="double" formalDisplayName="double" modelMemberIdentifier="type:double" modifiers="" packageName="" qualifiedName="double"/>
                    </containedType>
                </typeReference>
            </return>
            <parameter name="arg0">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrixPreservingVisitor" elementName="RealMatrixPreservingVisitor" formalDisplayName="RealMatrixPreservingVisitor" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrixPreservingVisitor" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrixPreservingVisitor"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.RealMatrixPreservingVisitor" elementName="RealMatrixPreservingVisitor" formalDisplayName="RealMatrixPreservingVisitor" modelMemberIdentifier="type:org.apache.commons.math3.linear.RealMatrixPreservingVisitor" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.RealMatrixPreservingVisitor"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg1">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg2">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg3">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <parameter name="arg4">
                <typeReference arrayDimensions="0" many="false">
                    <rawType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </rawType>
                    <containedType>
                        <type deep="false" displayTextTemplate="int" elementName="int" formalDisplayName="int" modelMemberIdentifier="type:int" modifiers="" packageName="" qualifiedName="int"/>
                    </containedType>
                </typeReference>
            </parameter>
            <calledMethods/>
        </method>
        <nonRecursiveSubtypes>
            <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.AbstractRealMatrix" elementName="AbstractRealMatrix" formalDisplayName="AbstractRealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.AbstractRealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.AbstractRealMatrix"/>
            <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.SparseRealMatrix" elementName="SparseRealMatrix" formalDisplayName="SparseRealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.SparseRealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.SparseRealMatrix"/>
        </nonRecursiveSubtypes>
        <recursiveSubtypes>
            <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.AbstractRealMatrix" elementName="AbstractRealMatrix" formalDisplayName="AbstractRealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.AbstractRealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.AbstractRealMatrix"/>
            <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.Array2DRowRealMatrix" elementName="Array2DRowRealMatrix" formalDisplayName="Array2DRowRealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.Array2DRowRealMatrix" modifiers="public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.Array2DRowRealMatrix"/>
            <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.BlockRealMatrix" elementName="BlockRealMatrix" formalDisplayName="BlockRealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.BlockRealMatrix" modifiers="public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.BlockRealMatrix"/>
            <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.DiagonalMatrix" elementName="DiagonalMatrix" formalDisplayName="DiagonalMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.DiagonalMatrix" modifiers="public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.DiagonalMatrix"/>
            <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.OpenMapRealMatrix" elementName="OpenMapRealMatrix" formalDisplayName="OpenMapRealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.OpenMapRealMatrix" modifiers="public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.OpenMapRealMatrix"/>
            <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.SparseRealMatrix" elementName="SparseRealMatrix" formalDisplayName="SparseRealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.SparseRealMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.SparseRealMatrix"/>
            <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.OpenMapRealMatrix" elementName="OpenMapRealMatrix" formalDisplayName="OpenMapRealMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.OpenMapRealMatrix" modifiers="public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.OpenMapRealMatrix"/>
        </recursiveSubtypes>
        <nonRecursiveSupertypes>
            <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.AnyMatrix" elementName="AnyMatrix" formalDisplayName="AnyMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.AnyMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.AnyMatrix"/>
        </nonRecursiveSupertypes>
        <recursiveSupertypes>
            <type deep="false" displayTextTemplate="org.apache.commons.math3.linear.AnyMatrix" elementName="AnyMatrix" formalDisplayName="AnyMatrix" modelMemberIdentifier="type:org.apache.commons.math3.linear.AnyMatrix" modifiers="abstract,public," packageName="org.apache.commons.math3.linear" qualifiedName="org.apache.commons.math3.linear.AnyMatrix"/>
        </recursiveSupertypes>
        <outwardDependencies/>
    </type>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAABf0lEQVR4nOVUXUsCQRT1t/ViKZT08WDqpqJBtGBagUSCFPRhkBTYB4jritsa2OJKUJIlBRqhUIYgREhEL0EP/YPb3IEdRF8me+zAYbnnnj17d3Z2TKYeNGofcLhVg5BbhwWhAMGZAq1R7/VyQ040aFhEvIR49I4Ra9SxP1Cof/IUdqO3oBw/gqa0GLFGHfu/Cn9tf4FnTIXtlQrkkk/Qi3bzk+o7kQr1oZ8rGNcwIl7A+lKZMrVXZ6HV8hvTkWuhEiTjD3zBix4d5ux5CLg0RgOlwgvT5h15SvRzBXttKjhH0uCyyGA3pygNaNkm07A/bZbIcpzwT+wmZpeV3DgsUbJg5ZnWRrDTkuafGNfMP5EDr00hD8iAMCqzYF1t0Rp1pG9chcwB585473zD1JAEAUGDjfBV366oXneoHiQ/Dfq4dwVC2q+TV81CePYcYqs3fRSdeTJtDtDHHdodLlizsOwrEupdLFJ9oFADeCYkNqsgOs7oB8XrUez+b2fF/8YPD2ecl9p99Q4AAAAASUVORK5CYII=" height="16" modelElementIdentifier="type:org.apache.commons.math3.linear.RealMatrix" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.add((Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.addToEntry((IID)V)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.copy(()Lorg/apache/commons/math3/linear/RealMatrix;)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.copySubMatrix((IIII[[D)V)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.copySubMatrix(([I[I[[D)V)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.createMatrix((II)Lorg/apache/commons/math3/linear/RealMatrix;)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.getColumn((I)[D)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.getColumnMatrix((I)Lorg/apache/commons/math3/linear/RealMatrix;)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.getColumnVector((I)Lorg/apache/commons/math3/linear/RealVector;)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.getData(()[[D)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.getEntry((II)D)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.getFrobeniusNorm(()D)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.getNorm(()D)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.getRow((I)[D)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.getRowMatrix((I)Lorg/apache/commons/math3/linear/RealMatrix;)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.getRowVector((I)Lorg/apache/commons/math3/linear/RealVector;)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.getSubMatrix((IIII)Lorg/apache/commons/math3/linear/RealMatrix;)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.getSubMatrix(([I[I)Lorg/apache/commons/math3/linear/RealMatrix;)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.getTrace(()D)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.multiply((Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.multiplyEntry((IID)V)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.operate(([D)[D)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.operate((Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/RealVector;)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.power((I)Lorg/apache/commons/math3/linear/RealMatrix;)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.preMultiply((Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.preMultiply(([D)[D)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.preMultiply((Lorg/apache/commons/math3/linear/RealVector;)Lorg/apache/commons/math3/linear/RealVector;)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.scalarAdd((D)Lorg/apache/commons/math3/linear/RealMatrix;)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.scalarMultiply((D)Lorg/apache/commons/math3/linear/RealMatrix;)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.setColumn((I[D)V)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.setColumnMatrix((ILorg/apache/commons/math3/linear/RealMatrix;)V)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.setColumnVector((ILorg/apache/commons/math3/linear/RealVector;)V)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.setEntry((IID)V)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.setRow((I[D)V)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.setRowMatrix((ILorg/apache/commons/math3/linear/RealMatrix;)V)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.setRowVector((ILorg/apache/commons/math3/linear/RealVector;)V)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.setSubMatrix(([[DII)V)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.subtract((Lorg/apache/commons/math3/linear/RealMatrix;)Lorg/apache/commons/math3/linear/RealMatrix;)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.transpose(()Lorg/apache/commons/math3/linear/RealMatrix;)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.walkInColumnOrder((Lorg/apache/commons/math3/linear/RealMatrixChangingVisitor;)D)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.walkInColumnOrder((Lorg/apache/commons/math3/linear/RealMatrixPreservingVisitor;)D)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.walkInColumnOrder((Lorg/apache/commons/math3/linear/RealMatrixChangingVisitor;IIII)D)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.walkInColumnOrder((Lorg/apache/commons/math3/linear/RealMatrixPreservingVisitor;IIII)D)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.walkInOptimizedOrder((Lorg/apache/commons/math3/linear/RealMatrixChangingVisitor;)D)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.walkInOptimizedOrder((Lorg/apache/commons/math3/linear/RealMatrixPreservingVisitor;)D)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.walkInOptimizedOrder((Lorg/apache/commons/math3/linear/RealMatrixChangingVisitor;IIII)D)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.walkInOptimizedOrder((Lorg/apache/commons/math3/linear/RealMatrixPreservingVisitor;IIII)D)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.walkInRowOrder((Lorg/apache/commons/math3/linear/RealMatrixChangingVisitor;)D)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.walkInRowOrder((Lorg/apache/commons/math3/linear/RealMatrixPreservingVisitor;)D)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.walkInRowOrder((Lorg/apache/commons/math3/linear/RealMatrixChangingVisitor;IIII)D)" width="22"/>
    <icon data="iVBORw0KGgoAAAANSUhEUgAAABYAAAAQCAYAAAAS7Y8mAAAA7klEQVR4nGNgoAL4DwQiVRYg6j81zIMbWr1vEthgEE01w5FdS1VX08Rg5GCAYYLBUbp9wn/WRs//elMT/oPYhFwLA3hd7bu4+H/8qpL/Wy7N/T/j2AQwGySGzWCDrgAUg2F8DEMLt/X+D1te8H/1+ZlIeAZYDCSHbjAugGEwc4PH/6a9Tf9b9rUg8P4WsBhIDmfYEQKyPWH/k1YBXbexDIpLwTRIDCRHtsEp61r/28+I/9+xs/F/x47G/51ADGLbT0/4D5Ij22AQcJ6T899rdur/6Xs7/jdtrQezQWIUGQoD+Ru74MkNxKaKoSMTAADT0xoKYwTuIgAAAABJRU5ErkJggg==" height="16" modelElementIdentifier="method:org.apache.commons.math3.linear.RealMatrix.walkInRowOrder((Lorg/apache/commons/math3/linear/RealMatrixPreservingVisitor;IIII)D)" width="22"/>
</AgileJWebModel>
